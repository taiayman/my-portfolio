# Source Code Export

Generated on 01/12/2024, 22:37:10

## File: src\app\about\page.tsx

```tsx
'use client';

import { motion, AnimatePresence } from 'framer-motion';
import Image from 'next/image';
import { useState } from 'react';

const profiles = [
  {
    id: 1,
    name: "Ayman Tai",
    role: "Full Stack Developer",
    image: "/profile2.jpg",
    bio: "Passionate full-stack developer with expertise in web and mobile development. Specialized in creating scalable applications using modern technologies.",
    skills: [
      "React/Next.js",
      "Node.js",
      "Flutter",
      "Firebase",
      "MongoDB",
      "TypeScript",
      "TailwindCSS",
      "Git"
    ],
    stats: [
      { label: "Years Experience", value: "5+" },
      { label: "Projects Completed", value: "50+" },
      { label: "Happy Clients", value: "30+" }
    ]
  },
  {
    id: 2,
    name: "Ayman T.",
    role: "UI/UX Designer",
    image: "/profile1.jpg",
    bio: "Creative UI/UX designer focused on creating beautiful and functional user experiences. Combining aesthetics with usability to deliver exceptional digital products.",
    skills: [
      "Figma",
      "Adobe XD",
      "UI Design",
      "UX Research",
      "Prototyping",
      "Wireframing",
      "Design Systems",
      "User Testing"
    ],
    stats: [
      { label: "UI/UX Projects", value: "40+" },
      { label: "Design Systems", value: "15+" },
      { label: "Client Reviews", value: "4.9/5" }
    ]
  }
];

export default function AboutPage() {
  const [activeProfile, setActiveProfile] = useState(0);

  return (
    <section id="about" className="min-h-screen bg-[#faf5f0]">
      <div className="container mx-auto px-4 py-24">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="text-center mb-16"
        >
          <h2 className="text-5xl font-bold mb-6 text-[#1a1a1a]">About Me</h2>
          <p className="text-xl text-[#1a1a1a]/70 max-w-2xl mx-auto">
            Passionate about creating innovative digital solutions and beautiful user experiences.
          </p>
        </motion.div>

        <div className="flex justify-center gap-4 mb-16">
          {profiles.map((profile, index) => (
            <button
              key={profile.id}
              onClick={() => setActiveProfile(index)}
              className={`px-6 py-2 rounded-full font-medium border transition-colors duration-300 ${
                activeProfile === index
                  ? 'bg-[#1a1a1a] text-[#faf5f0] border-[#1a1a1a]'
                  : 'bg-[#faf5f0] text-[#1a1a1a] border-[#1a1a1a]/10 hover:border-[#1a1a1a]/30'
              }`}
            >
              {profile.role}
            </button>
          ))}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <AnimatePresence mode="wait">
              <motion.div
                key={activeProfile}
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                transition={{ duration: 0.5 }}
                className="relative aspect-square w-full max-w-md mx-auto"
              >
                <div className="relative h-full w-full rounded-full overflow-hidden border border-[#1a1a1a]/10">
                  <Image
                    src={profiles[activeProfile].image}
                    alt={profiles[activeProfile].name}
                    fill
                    className="object-cover"
                    priority
                  />
                </div>
              </motion.div>
            </AnimatePresence>
          </motion.div>

          <div className="space-y-8">
            <motion.div
              key={activeProfile}
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
              className="space-y-6"
            >
              <div>
                <h3 className="text-2xl font-bold mb-2 text-[#1a1a1a]">{profiles[activeProfile].name}</h3>
                <p className="text-[#1a1a1a]/70 text-lg">{profiles[activeProfile].role}</p>
              </div>

              <p className="text-[#1a1a1a]/70">{profiles[activeProfile].bio}</p>

              <div className="grid grid-cols-3 gap-6">
                {profiles[activeProfile].stats.map((stat) => (
                  <div key={stat.label} className="border border-[#1a1a1a]/10 p-4">
                    <div className="text-2xl font-bold mb-1 text-[#1a1a1a]">{stat.value}</div>
                    <div className="text-sm text-[#1a1a1a]/60">{stat.label}</div>
                  </div>
                ))}
              </div>

              <div>
                <h4 className="text-xl font-semibold mb-4 text-[#1a1a1a]">Skills & Expertise</h4>
                <div className="flex flex-wrap gap-3">
                  {profiles[activeProfile].skills.map((skill) => (
                    <span
                      key={skill}
                      className="border border-[#1a1a1a]/10 text-[#1a1a1a]/70 px-4 py-2 text-sm"
                    >
                      {skill}
                    </span>
                  ))}
                </div>
              </div>
            </motion.div>
          </div>
        </div>
      </div>
    </section>
  );
}
```

## File: src\app\api\chat\route.ts

```ts
import { NextResponse } from "next/server";

type QAData = {
  [key: string]: string;
};

// Predefined QA pairs
const qaData: QAData = {
  "hi": "Hello! How can I help you today?",
  "what can you do?": "I can help you with various tasks like coding, answering questions, and providing information about different topics.",
  "tell me about yourself": "I'm an AI assistant designed to help with various tasks and answer questions.",
  "who created you?": "I was created by Google as part of their Gemini AI model family.",
  "what is your name?": "You can call me Gemini!",
  "how are you?": "I'm functioning well, thank you for asking! How can I assist you today?",
  "what time is it?": "I can't tell real-time information, but I can help you with other questions!",
  "goodbye": "Goodbye! Have a great day!",
  "thanks": "You're welcome! Let me know if you need anything else.",
  "help": "I can help you with various topics. Try asking me about coding, general knowledge, or any other questions you have!"
};

export async function POST(req: Request) {
  try {
    const { messages } = await req.json();
    const lastMessage = messages[messages.length - 1];
    const userInput = lastMessage.content.toLowerCase().trim();

    // Get predefined response or default message
    const response = qaData[userInput] || "I'm not sure how to respond to that. Try asking me something else!";

    return NextResponse.json({ content: response });

  } catch (error) {
    console.error('Error in chat route:', error);
    return NextResponse.json(
      { error: 'Failed to generate response' },
      { status: 500 }
    );
  }
}
```

## File: src\app\blog\[slug]\page.tsx

```tsx
'use client';

import { motion } from 'framer-motion';
import Image from 'next/image';
import Link from 'next/link';
import { useParams } from 'next/navigation';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { atomDark } from 'react-syntax-highlighter/dist/cjs/styles/prism';

const blogPosts = {
  "building-scalable-applications-nextjs-14": {
    title: "Building Scalable Applications with Next.js 14",
    date: "Nov 28, 2023",
    readTime: "12 min read",
    category: "Development",
    image: "https://images.unsplash.com/photo-1555066931-4365d14bab8c?q=80&w=2070&auto=format&fit=crop",
    content: `Next.js 14 has revolutionized the way we build web applications, introducing groundbreaking features that enhance both developer experience and application performance. In this comprehensive guide, we'll dive deep into the latest innovations and explore best practices for creating scalable, performant applications.

## Server Components in Action

Server Components represent one of the most significant innovations in React development. Here's a practical example:

\`\`\`jsx
// app/products/page.tsx
async function ProductList() {
  // This runs on the server
  const products = await fetchProducts();
  
  return (
    <div className="grid grid-cols-3 gap-4">
      {products.map(product => (
        <ProductCard 
          key={product.id}
          product={product}
        />
      ))}
    </div>
  );
}

// Direct database queries in Server Components
async function fetchProducts() {
  const products = await db.query(\`
    SELECT * FROM products 
    WHERE status = 'active'
    ORDER BY created_at DESC
    LIMIT 10
  \`);
  
  return products;
}
\`\`\`

## Parallel Data Fetching

Next.js 14 enables efficient parallel data fetching:

\`\`\`typescript
// app/dashboard/page.tsx
import { Suspense } from 'react';

async function DashboardPage() {
  // These requests run in parallel
  const [userData, analytics, notifications] = await Promise.all([
    fetchUserData(),
    fetchAnalytics(),
    fetchNotifications()
  ]);

  return (
    <div className="dashboard-layout">
      <Suspense fallback={<UserProfileSkeleton />}>
        <UserProfile data={userData} />
      </Suspense>
      
      <Suspense fallback={<AnalyticsSkeleton />}>
        <AnalyticsChart data={analytics} />
      </Suspense>
      
      <Suspense fallback={<NotificationsSkeleton />}>
        <NotificationPanel notifications={notifications} />
      </Suspense>
    </div>
  );
}
\`\`\`

## Route Handlers

Modern API routes in Next.js 14:

\`\`\`typescript
// app/api/products/route.ts
import { NextResponse } from 'next/server';

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const category = searchParams.get('category');

  try {
    const products = await db.products.findMany({
      where: {
        category: category || undefined,
        status: 'active'
      },
      select: {
        id: true,
        name: true,
        price: true,
        description: true
      }
    });

    return NextResponse.json(products);
  } catch (error) {
    return NextResponse.json(
      { error: 'Failed to fetch products' },
      { status: 500 }
    );
  }
}
\`\`\`

## Image Optimization

Implement optimized images with Next.js:

\`\`\`jsx
import Image from 'next/image';

function ProductImage({ product }) {
  return (
    <div className="relative aspect-square w-full overflow-hidden rounded-lg">
      <Image
        src={product.image}
        alt={product.name}
        fill
        sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
        className="object-cover"
        priority={product.featured}
        placeholder="blur"
        blurDataURL={product.blurUrl}
      />
    </div>
  );
}
\`\`\`

## Metadata API

Implement dynamic metadata for better SEO:

\`\`\`typescript
// app/products/[id]/page.tsx
import { Metadata } from 'next';

type Props = {
  params: { id: string }
};

export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const product = await fetchProduct(params.id);
  
  return {
    title: product.name,
    description: product.description,
    openGraph: {
      images: [{ url: product.image }],
    },
  };
}
\`\`\`

These examples demonstrate the power and flexibility of Next.js 14's features. By following these patterns, you can build scalable, performant applications that provide excellent user experiences.`,
    excerpt: "Next.js 14 has revolutionized the way we build web applications, introducing groundbreaking features that enhance both developer experience and application performance."
  },
  "future-mobile-development-flutter": {
    title: "The Future of Mobile Development with Flutter",
    date: "Nov 25, 2023",
    readTime: "4 min read",
    category: "Mobile",
    image: "https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?q=80&w=2070&auto=format&fit=crop",
    content: `Flutter has emerged as a game-changing framework in the mobile development landscape. Let's explore why it's becoming the preferred choice for developers worldwide.

## Why Flutter?

### Cross-Platform Excellence
Flutter's ability to maintain consistent performance across platforms while sharing a single codebase makes it an attractive choice for businesses and developers.

### Rich Widget Library
The extensive collection of customizable widgets enables developers to create beautiful, native-like interfaces with minimal effort.

## Key Advantages

1. **Hot Reload**
- Instant view of changes
- Faster development cycle
- Better experimentation

2. **Performance**
- Native compilation
- Smooth animations
- Excellent rendering engine

3. **Single Codebase**
- Reduced development time
- Easier maintenance
- Consistent experience

## Future Prospects

Flutter's future looks promising with:
- Web and desktop support
- Growing community
- Improved tooling
- Enhanced performance`
  },
  "mastering-tailwind-css": {
    title: "Mastering Tailwind CSS: From Basics to Advanced",
    date: "Nov 24, 2023",
    readTime: "6 min read",
    category: "Design",
    image: "https://images.unsplash.com/photo-1507238691740-187a5b1d37b8?q=80&w=2055&auto=format&fit=crop",
    content: `Tailwind CSS has revolutionized the way we approach web styling. Let's dive deep into mastering this utility-first framework.

## Why Tailwind CSS?

### Utility-First Approach
Tailwind's utility-first methodology provides unprecedented flexibility and speed in styling web applications.

### Performance Benefits
- Automatic purging of unused styles
- Minimal production CSS
- Optimized build process

## Advanced Techniques

### 1. Custom Configuration
Learn how to extend and customize Tailwind:
- Custom color palettes
- Custom breakpoints
- Plugin development

### 2. Component Patterns
Best practices for component design:
- Extracting component classes
- Building responsive layouts
- Dark mode implementation

### 3. Animation and Transitions
Creating smooth user experiences:
- Hover effects
- Page transitions
- Loading states

## Best Practices

1. **Organization**
- Consistent class ordering
- Component extraction
- Theme configuration

2. **Responsive Design**
- Mobile-first approach
- Breakpoint strategies
- Container queries

## Real-World Applications

Practical examples of Tailwind in action:
- Dashboard layouts
- Card components
- Navigation menus
- Form styling`
  },
  "ai-in-modern-development": {
    title: "AI in Modern Development: A Practical Guide",
    date: "Nov 23, 2023",
    readTime: "8 min read",
    category: "AI",
    image: "https://images.unsplash.com/photo-1677442136019-21780ecad995?q=80&w=2070&auto=format&fit=crop",
    content: `Artificial Intelligence is transforming software development. Let's explore practical ways to integrate AI into your development workflow.

## AI Tools for Developers

### 1. Code Assistance
Modern AI-powered coding tools offer:
- Intelligent code completion
- Bug detection and fixes
- Code refactoring suggestions

### 2. Testing and QA
AI enhances testing through:
- Automated test generation
- Bug prediction
- Performance optimization

### 3. Project Management
AI tools help in:
- Sprint planning
- Resource allocation
- Risk assessment

## Implementation Strategies

### Getting Started
Key steps to integrate AI in your workflow:
- Tool selection
- Team training
- Process adaptation

### Best Practices
1. **Data Security**
- API key management
- Code privacy
- Data handling

2. **Quality Control**
- Code review processes
- Testing protocols
- Performance monitoring

## Future Trends

The future of AI in development:
- More sophisticated code generation
- Enhanced debugging capabilities
- Automated documentation
- Predictive maintenance

## Practical Applications

Real-world scenarios where AI excels:
- Code optimization
- Security vulnerability detection
- Performance profiling
- Documentation generation`
  },
  "modern-authentication": {
    title: "Modern Authentication: Best Practices and Implementation",
    date: "Nov 22, 2023",
    readTime: "7 min read",
    category: "Security",
    image: "https://images.unsplash.com/photo-1555949963-ff9fe0c870eb?q=80&w=2070&auto=format&fit=crop",
    content: `Secure authentication is crucial for modern applications. Let's explore current best practices and implementation strategies.

## Authentication Fundamentals

### Core Concepts
Understanding the basics:
- Token-based authentication
- OAuth 2.0 and OpenID Connect
- JWT implementation

### Security Considerations
Critical security aspects:
- Password hashing
- Salt and pepper
- Rate limiting

## Implementation Strategies

### 1. JWT Authentication
Best practices for JWT:
- Token structure
- Expiration handling
- Refresh token rotation

### 2. OAuth Implementation
Setting up OAuth:
- Provider selection
- Flow configuration
- Callback handling

### 3. Social Authentication
Integrating social login:
- Multiple provider support
- Profile mapping
- Error handling

## Advanced Topics

1. **Multi-Factor Authentication**
- TOTP implementation
- Recovery codes
- Backup methods

2. **Session Management**
- Session storage
- Timeout handling
- Concurrent sessions

## Security Best Practices

Essential security measures:
- HTTPS enforcement
- CORS configuration
- XSS prevention
- CSRF protection

## Future Considerations

Emerging authentication trends:
- Passwordless authentication
- Biometric integration
- Blockchain-based auth
- Zero-trust architecture`
  }
};

const renderContent = (content: string) => {
  const blocks = content.split('```');
  
  return blocks.map((block, index) => {
    // If it's a code block (odd indexes after split)
    if (index % 2 === 1) {
      const [language, ...codeLines] = block.split('\n');
      const code = codeLines.join('\n').trim();
      
      return (
        <div key={index} className="my-6 rounded-lg overflow-hidden">
          <SyntaxHighlighter
            language={language}
            style={atomDark}
            customStyle={{
              margin: 0,
              borderRadius: '0.5rem',
              background: '#1E1E1E'
            }}
            className="text-sm"
          >
            {code}
          </SyntaxHighlighter>
        </div>
      );
    }

    // Regular content
    return block.split('\n').map((paragraph, pIndex) => {
      if (!paragraph.trim()) return null;

      // Handle headings
      if (paragraph.trim().startsWith('#')) {
        const matches = paragraph.match(/^(#+)\s(.+)/);
        if (matches) {
          const level = matches[1].length;
          const text = matches[2];
          const Tag = `h${level}` as keyof JSX.IntrinsicElements;
          return (
            <Tag 
              key={`${index}-${pIndex}`}
              className={`font-bold ${
                level === 1 ? 'text-3xl mb-6' : 
                level === 2 ? 'text-2xl mb-4' : 
                'text-xl mb-3'
              }`}
            >
              {text}
            </Tag>
          );
        }
      }

      // Handle list items
      if (paragraph.trim().startsWith('-')) {
        return (
          <ul key={`${index}-${pIndex}`} className="list-disc list-inside mb-4">
            <li className="text-[#faf5f0]/80">
              {paragraph.replace('-', '').trim()}
            </li>
          </ul>
        );
      }

      // Regular paragraphs
      return (
        <p key={`${index}-${pIndex}`} className="text-[#faf5f0]/80 mb-4">
          {paragraph}
        </p>
      );
    });
  });
};

export default function BlogPost() {
  const { slug } = useParams();
  const post = blogPosts[slug as keyof typeof blogPosts];

  if (!post) {
    return (
      <div className="min-h-screen bg-[#1a1a1a] text-[#faf5f0] py-20">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-4xl font-bold mb-4">Blog Post Not Found</h1>
          <Link href="/blog" className="text-[#faf5f0]/80 hover:text-[#faf5f0]">
            ← Back to Blog
          </Link>
        </div>
      </div>
    );
  }

  return (
    <article className="min-h-screen bg-[#1a1a1a] text-[#faf5f0] py-20">
      <div className="container mx-auto px-4">
        <Link 
          href="/blog"
          className="inline-flex items-center text-[#faf5f0]/80 hover:text-[#faf5f0] mb-8"
        >
          ← Back to Blog
        </Link>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <div className="relative aspect-[21/9] w-full mb-8 rounded-xl overflow-hidden">
            <Image
              src={post.image}
              alt={post.title}
              fill
              className="object-cover"
              priority
              sizes="(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 1400px"
              quality={100}
            />
            <div className="absolute inset-0 bg-black/20" />
          </div>

          <div className="max-w-4xl mx-auto">
            <div className="flex items-center gap-4 mb-6">
              <span className="bg-[#faf5f0]/10 text-sm px-3 py-1 rounded-full">
                {post.category}
              </span>
              <span className="text-[#faf5f0]/60 text-sm">{post.readTime}</span>
              <span className="text-[#faf5f0]/60 text-sm">{post.date}</span>
            </div>

            <h1 className="text-4xl font-bold mb-8">{post.title}</h1>

            <div className="prose prose-invert prose-lg max-w-none">
              {renderContent(post.content)}
            </div>
          </div>
        </motion.div>
      </div>
    </article>
  );
}
```

## File: src\app\blog\page.tsx

```tsx
'use client';

import { motion } from 'framer-motion';
import Image from 'next/image';
import Link from 'next/link';

// Import the blog posts data
const blogPosts = {
  "building-scalable-applications-nextjs-14": {
    title: "Building Scalable Applications with Next.js 14",
    date: "Nov 28, 2023",
    readTime: "12 min read",
    category: "Development",
    image: "https://images.unsplash.com/photo-1555066931-4365d14bab8c?q=80&w=2070&auto=format&fit=crop",
    excerpt: "Next.js 14 has revolutionized the way we build web applications, introducing groundbreaking features that enhance both developer experience and application performance."
  },
  "future-mobile-development-flutter": {
    title: "The Future of Mobile Development with Flutter",
    date: "Nov 25, 2023",
    readTime: "4 min read",
    category: "Mobile",
    image: "https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?q=80&w=2070&auto=format&fit=crop",
    excerpt: "Flutter has emerged as a game-changing framework in the mobile development landscape. Let's explore why it's becoming the preferred choice for developers worldwide."
  },
  "mastering-tailwind-css": {
    title: "Mastering Tailwind CSS: From Basics to Advanced",
    date: "Nov 24, 2023",
    readTime: "6 min read",
    category: "Design",
    image: "https://images.unsplash.com/photo-1507238691740-187a5b1d37b8?q=80&w=2055&auto=format&fit=crop",
    excerpt: "Tailwind CSS has revolutionized the way we approach web styling. Let's dive deep into mastering this utility-first framework."
  },
  "ai-in-modern-development": {
    title: "AI in Modern Development: A Practical Guide",
    date: "Nov 23, 2023",
    readTime: "8 min read",
    category: "AI",
    image: "https://images.unsplash.com/photo-1677442136019-21780ecad995?q=80&w=2070&auto=format&fit=crop",
    excerpt: "Artificial Intelligence is transforming software development. Let's explore practical ways to integrate AI into your development workflow."
  },
  "modern-authentication": {
    title: "Modern Authentication: Best Practices and Implementation",
    date: "Nov 22, 2023",
    readTime: "7 min read",
    category: "Security",
    image: "https://images.unsplash.com/photo-1555949963-ff9fe0c870eb?q=80&w=2070&auto=format&fit=crop",
    excerpt: "Secure authentication is crucial for modern applications. Let's explore current best practices and implementation strategies."
  }
};

export default function BlogPage() {
  return (
    <main className="relative min-h-screen bg-[#faf5f0]">
      <section className="py-24">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, ease: "easeOut" }}
            className="text-center mb-20"
          >
            <h1 className="text-5xl font-bold mb-6 text-[#1a1a1a]">
              Blog & Insights
            </h1>
            <p className="text-lg text-[#1a1a1a]/80 max-w-2xl mx-auto">
              Exploring the latest in web development, design patterns, and emerging technologies.
            </p>
          </motion.div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {Object.entries(blogPosts).map(([slug, post], index) => (
              <motion.article
                key={slug}
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
                className="group relative bg-[#faf5f0] rounded-md overflow-hidden border border-[#1a1a1a]/10 hover:border-[#1a1a1a]/20 transition-colors duration-300"
              >
                <Link href={`/blog/${slug}`}>
                  <div className="relative aspect-[16/9] w-full overflow-hidden">
                    <Image
                      src={post.image}
                      alt={post.title}
                      fill
                      className="object-cover transform group-hover:scale-105 transition-transform duration-500"
                      sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                    />
                  </div>
                  <div className="space-y-4 p-6">
                    <div className="flex items-center gap-4">
                      <span className="text-[#1a1a1a] text-sm font-medium">
                        {post.category}
                      </span>
                      <span className="text-[#1a1a1a]/60 text-sm">{post.readTime}</span>
                    </div>
                    <h2 className="text-2xl font-bold text-[#1a1a1a] group-hover:text-[#1a1a1a]/80 transition-colors duration-300">
                      {post.title}
                    </h2>
                    <p className="text-[#1a1a1a]/70">
                      {post.excerpt}
                    </p>
                    <div className="flex items-center justify-between pt-2">
                      <span className="text-sm text-[#1a1a1a]/60">{post.date}</span>
                      <span className="inline-flex items-center text-[#1a1a1a] font-medium group-hover:translate-x-1 transition-transform duration-300">
                        Read More <span className="ml-1">→</span>
                      </span>
                    </div>
                  </div>
                </Link>
              </motion.article>
            ))}
          </div>
        </div>
      </section>
    </main>
  );
}
```

## File: src\app\globals.css

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

/* Apply Poppins font family */
body {
  font-family: var(--font-poppins), system-ui, sans-serif;
}

/* Custom font styles */
.text-title {
  @apply font-bold tracking-tight;
}

.text-subtitle {
  @apply font-medium tracking-wide;
}

.text-body {
  @apply font-normal;
}

.text-button {
  @apply font-semibold tracking-wide;
}

/* Existing styles */
.shadow-top {
  box-shadow: 0 -4px 6px -1px rgb(0 0 0 / 0.1), 0 -2px 4px -2px rgb(0 0 0 / 0.1);
}

@layer base {
  html {
    @apply antialiased scroll-smooth;
  }

  body {
    @apply text-gray-900 bg-white overflow-x-hidden;
  }
}

@layer components {
  .btn {
    @apply inline-flex items-center justify-center px-6 py-3 rounded-lg font-medium
           transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2
           cursor-pointer;
  }

  .btn-primary {
    @apply btn bg-primary text-white hover:bg-opacity-90 focus:ring-primary;
  }

  .btn-secondary {
    @apply btn border-2 border-primary text-primary hover:bg-primary hover:text-white;
  }

  .card {
    @apply cursor-pointer transition-all duration-200 hover:shadow-lg;
  }

  /* Mobile scrollbar styles */
  .mobile-scroll {
    @apply scrollbar-hide overflow-y-auto overscroll-y-contain;
    -webkit-overflow-scrolling: touch;
    scroll-behavior: smooth;
  }

  .mobile-scroll::-webkit-scrollbar {
    width: 2px;
    background: transparent;
  }

  .mobile-scroll::-webkit-scrollbar-thumb {
    background: rgba(0, 0, 0, 0.1);
    border-radius: 1px;
  }

  /* Hide scrollbar when not scrolling */
  .mobile-scroll:not(:hover)::-webkit-scrollbar-thumb {
    opacity: 0;
  }
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  /* Custom cursor styles */
  .cursor-crosshair {
    cursor: crosshair;
  }

  .cursor-crosshair::after {
    content: '';
    position: fixed;
    width: 20px;
    height: 20px;
    border: 2px solid rgba(0, 0, 0, 0.5);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    pointer-events: none;
    transition: all 0.1s ease;
    z-index: 9999;
  }

  .cursor-crosshair:active::after {
    width: 16px;
    height: 16px;
    border-color: rgba(0, 0, 0, 0.8);
  }
}

html {
  scroll-behavior: smooth;
  scroll-padding-top: 80px; /* This accounts for the fixed navbar */
}

body {
  overflow-x: hidden;
}

@media (max-width: 768px) {
  body {
    padding-bottom: 4rem;
  }
}
```

## File: src\app\layout.tsx

```tsx
import { Poppins } from 'next/font/google';
import './globals.css';
import Navbar from '@/components/Navbar';

const poppins = Poppins({
  subsets: ['latin'],
  weight: ['400', '500', '600', '700'],
  variable: '--font-poppins',
});

export const metadata = {
  title: 'Portfolio',
  description: 'Generated by create next app',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" className={poppins.variable}>
      <body>
        <Navbar />
        <main className="min-h-screen bg-[#fcf5eb]">
          {children}
        </main>
      </body>
    </html>
  );
}
```

## File: src\app\page.tsx

```tsx
import Hero from '@/components/Hero'
import Portfolio from '@/components/Portfolio'
import Footer from '@/components/Footer'

export default function Home() {
  return (
    <main className="relative">
      <div id="home">
        <Hero />
      </div>
      <div id="portfolio">
        <Portfolio />
      </div>
      <Footer />
    </main>
  )
}
```

## File: src\app\portfolio\page.tsx

```tsx
'use client';

import { motion } from 'framer-motion';
import Image from 'next/image';
import { useState } from 'react';

const categories = ["All", "Mobile", "Desktop", "Web"];

const projects = [
  {
    title: "English Level Assessment App",
    description: "A desktop application built with Flutter and Firebase that helps students assess and track their English proficiency level. Features include assessment tests, progress tracking, and personalized learning paths.",
    image: "/images/desktop_app.png",
    category: "Desktop",
    technologies: ["Flutter", "Firebase", "Desktop", "Education"],
    features: [
      "Interactive English assessment tests",
      "Real-time progress tracking",
      "Personalized learning recommendations",
      "Comprehensive performance analytics"
    ]
  },
  {
    title: "Business Management Suite",
    description: "A comprehensive mobile application for business owners to manage their companies, projects, and CEOs. Essential tool for business operations with features for project tracking, team management, and performance analytics.",
    image: "/images/mobile_app.png",
    category: "Mobile",
    technologies: ["Mobile", "Business", "Management", "Analytics"],
    features: [
      "Project and task management",
      "Team collaboration tools",
      "Performance dashboards",
      "Resource allocation"
    ]
  },
  {
    title: "Morjib Delivery Platform",
    description: "An all-in-one ecommerce and delivery platform similar to Glovo. Connects customers with local businesses for food, groceries, and other deliveries with real-time tracking and seamless payment integration.",
    image: "/images/morjib.png",
    category: "Mobile",
    technologies: ["E-commerce", "Delivery", "Mobile", "Real-time"],
    features: [
      "Real-time order tracking",
      "Secure payment processing",
      "Vendor management system",
      "Customer rating system"
    ]
  }
];

export default function PortfolioPage() {
  const [selectedCategory, setSelectedCategory] = useState("All");

  const filteredProjects = projects.filter(project => 
    selectedCategory === "All" ? true : project.category === selectedCategory
  );

  return (
    <div className="min-h-screen bg-gradient-to-b from-[#faf5f0] to-white py-20">
      <div className="container mx-auto px-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="text-center mb-16"
        >
          <h1 className="text-5xl font-bold text-[#1a1a1a] mb-6">Our Portfolio</h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Explore our collection of innovative solutions across desktop, mobile, and web platforms. 
            Each project represents our commitment to excellence and user-centered design.
          </p>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
          className="flex justify-center gap-4 mb-12"
        >
          {categories.map((category) => (
            <button
              key={category}
              onClick={() => setSelectedCategory(category)}
              className={`px-6 py-2 rounded-full font-medium transition-colors duration-300 ${
                selectedCategory === category
                  ? 'bg-[#1a1a1a] text-white'
                  : 'bg-white text-[#1a1a1a] hover:bg-gray-100'
              }`}
            >
              {category}
            </button>
          ))}
        </motion.div>

        <div className="space-y-20">
          {filteredProjects.map((project, index) => (
            <motion.div
              key={project.title}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
              className="group relative bg-[#faf5f0] rounded-md overflow-hidden border border-[#1a1a1a]/10 hover:border-[#1a1a1a]/20 transition-colors duration-300"
            >
              <div className="grid md:grid-cols-2 gap-8 p-6">
                <div className="relative aspect-[16/9] w-full overflow-hidden">
                  <Image
                    src={project.image}
                    alt={project.title}
                    fill
                    className="object-cover transform group-hover:scale-105 transition-transform duration-500"
                  />
                </div>
                <div className="space-y-6">
                  <div>
                    <div className="flex items-center gap-4 mb-4">
                      <span className="text-[#1a1a1a] text-sm font-medium">
                        {project.category}
                      </span>
                      <span className="text-[#1a1a1a]/60 text-sm">
                        {project.technologies.join(" • ")}
                      </span>
                    </div>
                    <h3 className="text-2xl font-bold text-[#1a1a1a] group-hover:text-[#1a1a1a]/80 transition-colors duration-300 mb-4">
                      {project.title}
                    </h3>
                    <p className="text-[#1a1a1a]/70">{project.description}</p>
                  </div>
                  
                  <div>
                    <h4 className="text-lg font-semibold text-[#1a1a1a] mb-3">Key Features</h4>
                    <ul className="space-y-2">
                      {project.features.map((feature) => (
                        <li key={feature} className="flex items-center text-[#1a1a1a]/70">
                          <span className="mr-2">•</span>
                          {feature}
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            </motion.div>
          ))}
        </div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.8 }}
          className="text-center mt-20"
        >
          <h2 className="text-3xl font-bold text-[#1a1a1a] mb-6">Have a Project in Mind?</h2>
          <p className="text-gray-600 mb-8 max-w-2xl mx-auto">
            We&apos;re always excited to take on new challenges and create innovative solutions. 
            Let&apos;s discuss how we can help bring your ideas to life.
          </p>
          <button className="bg-[#1a1a1a] text-white px-8 py-3 rounded-full font-semibold hover:bg-[#333] transition-colors duration-300">
            Start a Project
          </button>
        </motion.div>
      </div>
    </div>
  );
}
```

## File: src\app\services\page.tsx

```tsx
'use client';

import { motion } from 'framer-motion';
import { BiCode, BiMobile, BiLaptop, BiData, BiCloud, BiCog } from 'react-icons/bi';

const services = [
  {
    icon: <BiCode className="w-8 h-8" />,
    title: "Web Development",
    description: "Custom web applications built with modern technologies like React, Next.js, and Node.js. We create responsive, fast, and scalable solutions.",
    features: [
      "Responsive Design",
      "Progressive Web Apps",
      "E-commerce Solutions",
      "API Integration"
    ]
  },
  {
    icon: <BiMobile className="w-8 h-8" />,
    title: "Mobile Development",
    description: "Native and cross-platform mobile applications for iOS and Android using Flutter, React Native, and native technologies.",
    features: [
      "Cross-platform Apps",
      "Native iOS/Android",
      "App Store Deployment",
      "Mobile UI/UX Design"
    ]
  },
  {
    icon: <BiLaptop className="w-8 h-8" />,
    title: "Desktop Applications",
    description: "Powerful desktop applications for Windows, macOS, and Linux using Electron, Flutter, and other modern frameworks.",
    features: [
      "Cross-platform Support",
      "Offline Functionality",
      "System Integration",
      "Auto-updates"
    ]
  },
  {
    icon: <BiData className="w-8 h-8" />,
    title: "Database Solutions",
    description: "Database design, optimization, and management services for both SQL and NoSQL databases.",
    features: [
      "Database Design",
      "Performance Optimization",
      "Data Migration",
      "Backup Solutions"
    ]
  },
  {
    icon: <BiCloud className="w-8 h-8" />,
    title: "Cloud Services",
    description: "We&apos;ll help you leverage cloud platforms like AWS, Azure, and Google Cloud for scalable and reliable solutions.",
    features: [
      "Cloud Migration",
      "Serverless Architecture",
      "DevOps Integration",
      "Cloud Security"
    ]
  },
  {
    icon: <BiCog className="w-8 h-8" />,
    title: "Maintenance & Support",
    description: "Ongoing maintenance, updates, and technical support for all your software solutions.",
    features: [
      "24/7 Support",
      "Regular Updates",
      "Performance Monitoring",
      "Security Patches"
    ]
  }
];

export default function ServicesPage() {
  return (
    <div className="min-h-screen bg-[#faf5f0]">
      <div className="container mx-auto px-4 py-24">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="text-center mb-16"
        >
          <h1 className="text-5xl font-bold mb-6 text-[#1a1a1a]">Our Services</h1>
          <p className="text-xl text-[#1a1a1a]/70 max-w-3xl mx-auto">
            We offer comprehensive software solutions tailored to your needs. From web and mobile development 
            to cloud services and maintenance, we've got you covered.
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {services.map((service, index) => (
            <motion.div
              key={service.title}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
              className="group relative bg-[#faf5f0] rounded-md overflow-hidden border border-[#1a1a1a]/10 hover:border-[#1a1a1a]/20 transition-colors duration-300 p-6"
            >
              <div className="flex items-center gap-4 mb-6">
                <div className="text-[#1a1a1a] group-hover:scale-110 transition-transform duration-300">
                  {service.icon}
                </div>
                <span className="text-[#1a1a1a]/60 text-sm font-medium">
                  Software Solution
                </span>
              </div>
              <h3 className="text-2xl font-bold mb-4 text-[#1a1a1a] group-hover:text-[#1a1a1a]/80 transition-colors duration-300">
                {service.title}
              </h3>
              <p className="text-[#1a1a1a]/70 mb-6">
                {service.description}
              </p>
              <ul className="space-y-3">
                {service.features.map((feature) => (
                  <li key={feature} className="flex items-center text-[#1a1a1a]/70">
                    <span className="mr-2">•</span>
                    {feature}
                  </li>
                ))}
              </ul>
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  );
}
```

## File: src\components\About.tsx

```tsx
'use client';

import { motion } from 'framer-motion';
import { FaCode, FaLightbulb, FaRocket, FaUsers } from 'react-icons/fa';

const stats = [
  {
    icon: <FaCode className="w-6 h-6" />,
    value: "50+",
    label: "Projects Completed"
  },
  {
    icon: <FaUsers className="w-6 h-6" />,
    value: "30+",
    label: "Happy Clients"
  },
  {
    icon: <FaLightbulb className="w-6 h-6" />,
    value: "5+",
    label: "Years Experience"
  },
  {
    icon: <FaRocket className="w-6 h-6" />,
    value: "100%",
    label: "Client Satisfaction"
  }
];

export default function About() {
  return (
    <section id="about" className="py-12 md:py-20 bg-[#1a1a1a] text-[#faf5f0]">
      <div className="container mx-auto px-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5 }}
          className="text-center mb-10 md:mb-16"
        >
          <h2 className="text-3xl md:text-4xl font-bold mb-3 md:mb-4">About Us</h2>
          <p className="text-[#faf5f0]/80 max-w-2xl mx-auto text-sm md:text-base">
            We are a passionate team of developers and designers dedicated to creating exceptional digital experiences.
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 md:gap-12 items-start">
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5 }}
            className="order-2 md:order-1"
          >
            <h3 className="text-xl md:text-2xl font-bold mb-4 md:mb-6">Our Mission</h3>
            <p className="text-[#faf5f0]/80 mb-6 text-sm md:text-base">
              To empower businesses with innovative digital solutions that drive growth and success. We believe in creating 
              not just websites and applications, but experiences that leave a lasting impression.
            </p>
            <ul className="space-y-3 md:space-y-4 text-sm md:text-base">
              <li className="flex items-start">
                <svg className="w-5 h-5 md:w-6 md:h-6 text-[#faf5f0] mr-3 flex-shrink-0 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
                <span>Custom solutions tailored to your needs</span>
              </li>
              <li className="flex items-start">
                <svg className="w-5 h-5 md:w-6 md:h-6 text-[#faf5f0] mr-3 flex-shrink-0 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
                <span>Modern and scalable technology stack</span>
              </li>
              <li className="flex items-start">
                <svg className="w-5 h-5 md:w-6 md:h-6 text-[#faf5f0] mr-3 flex-shrink-0 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
                <span>Dedicated support and maintenance</span>
              </li>
            </ul>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, x: 20 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5 }}
            className="grid grid-cols-2 gap-4 md:gap-6 order-1 md:order-2"
          >
            {stats.map((stat, index) => (
              <motion.div
                key={stat.label}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
                className="bg-[#faf5f0]/10 p-4 md:p-6 rounded-xl text-center"
              >
                <div className="bg-[#faf5f0]/10 p-2 md:p-3 rounded-lg w-fit mx-auto mb-3 md:mb-4">
                  {stat.icon}
                </div>
                <div className="text-2xl md:text-3xl font-bold mb-1 md:mb-2">{stat.value}</div>
                <div className="text-[#faf5f0]/60 text-xs md:text-sm">{stat.label}</div>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </div>
    </section>
  );
}
```

## File: src\components\AIChatOverlay.tsx

```tsx
'use client';

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface AIChatOverlayProps {
  isOpen?: boolean;
  onClose?: () => void;
  selectedLanguage?: string;
}

const predefinedQuestions = [
  "What can you do?",
  "Tell me about yourself",
  "Who created you?",
  "How are you?",
  "Help"
];

const languages = [
  { name: 'English', code: 'en' },
  { name: 'Français', code: 'fr' },
  { name: 'العربية', code: 'ar' },
];

interface Message {
  content: string;
  role: 'user' | 'assistant';
  timestamp: string;
}

export default function AIChatOverlay({ 
  isOpen: externalIsOpen, 
  onClose, 
  selectedLanguage: initialLanguage = 'en' 
}: AIChatOverlayProps) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showLanguages, setShowLanguages] = useState(true);
  const [selectedLanguage, setSelectedLanguage] = useState(initialLanguage);

  const handleLanguageSelect = (langCode: string) => {
    setSelectedLanguage(langCode);
    setShowLanguages(false);
  };

  const sendMessage = async (content: string) => {
    if (!content.trim()) return;

    const newMessage: Message = {
      content,
      role: 'user',
      timestamp: new Date().toLocaleTimeString(),
    };

    setMessages(prev => [...prev, newMessage]);
    setIsLoading(true);

    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          messages: [...messages, newMessage],
          language: selectedLanguage 
        }),
      });

      const data = await response.json();

      setMessages(prev => [...prev, {
        content: data.content,
        role: 'assistant',
        timestamp: new Date().toLocaleTimeString(),
      }]);
    } catch (error) {
      console.error('Failed to send message:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AnimatePresence>
      {externalIsOpen && (
        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.95 }}
          className="fixed inset-0 z-50 flex items-center justify-center bg-black/50"
        >
          <div className="bg-white w-full max-w-lg rounded-lg shadow-xl">
            <div className="flex justify-between items-center p-4 border-b">
              <h2 className="text-xl font-semibold">AI Assistant</h2>
              <button
                onClick={onClose}
                className="text-gray-500 hover:text-gray-700"
              >
                ✕
              </button>
            </div>
            
            <div className="h-[500px] flex flex-col">
              {showLanguages ? (
                <div className="flex-1 p-6">
                  <h3 className="text-lg font-semibold mb-4 text-center">Choose your language</h3>
                  <div className="grid grid-cols-1 gap-4">
                    {languages.map((lang) => (
                      <button
                        key={lang.code}
                        onClick={() => handleLanguageSelect(lang.code)}
                        className="bg-gray-100 hover:bg-gray-200 rounded-lg p-4 text-center"
                      >
                        {lang.name}
                      </button>
                    ))}
                  </div>
                </div>
              ) : (
                <>
                  <div className="flex-1 overflow-y-auto p-4 space-y-4">
                    {messages.map((msg, idx) => (
                      <div
                        key={idx}
                        className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}
                      >
                        <div
                          className={`max-w-[80%] rounded-2xl px-4 py-2 ${
                            msg.role === 'user' 
                              ? 'bg-black text-white rounded-br-none' 
                              : 'bg-gray-200 text-gray-900 rounded-bl-none'
                          }`}
                        >
                          <p className="text-sm">{msg.content}</p>
                          <p className="text-xs mt-1 opacity-50">{msg.timestamp}</p>
                        </div>
                      </div>
                    ))}
                    {isLoading && (
                      <div className="flex justify-start">
                        <div className="bg-gray-200 rounded-2xl px-4 py-2">
                          <p className="text-sm">...</p>
                        </div>
                      </div>
                    )}
                  </div>

                  <div className="p-4 border-t">
                    <div className="flex flex-wrap gap-2">
                      {predefinedQuestions.map((question, idx) => (
                        <button
                          key={idx}
                          onClick={() => sendMessage(question)}
                          className="bg-gray-100 hover:bg-gray-200 rounded-full px-4 py-2 text-sm"
                        >
                          {question}
                        </button>
                      ))}
                    </div>
                  </div>
                </>
              )}
            </div>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}
```

## File: src\components\AnimatedLogo.tsx

```tsx
'use client';

import { useState, useEffect } from 'react';
import Image from 'next/image';
import { motion, AnimatePresence } from 'framer-motion';

const images = [
  '/profile1.jpg',
  '/profile2.jpg'
];

export default function AnimatedLogo() {
  const [currentIndex, setCurrentIndex] = useState(0);

  useEffect(() => {
    // Start the animation immediately
    const timer = setInterval(() => {
      setCurrentIndex((prev) => (prev === 0 ? 1 : 0));
    }, 2000); // Reduced to 2 seconds for more dynamic switching

    return () => clearInterval(timer);
  }, []);

  return (
    <div className="relative h-10 w-24 flex items-center">
      <AnimatePresence mode="wait">
        <motion.div
          key={currentIndex}
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.9 }}
          transition={{
            duration: 0.4,
            ease: "easeInOut"
          }}
          className="absolute inset-0 flex gap-2"
        >
          <div className="relative h-10 w-10 overflow-hidden rounded-full">
            <Image
              src={images[currentIndex]}
              alt="Profile"
              fill
              className="object-cover"
              sizes="40px"
              priority
            />
          </div>
          <div className="relative h-10 w-10 overflow-hidden rounded-full">
            <Image
              src={images[currentIndex === 0 ? 1 : 0]}
              alt="Profile"
              fill
              className="object-cover"
              sizes="40px"
              priority
            />
          </div>
        </motion.div>
      </AnimatePresence>
    </div>
  );
}
```

## File: src\components\AymanAI.tsx

```tsx
'use client';

import { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface Message {
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

export default function AymanAI() {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!inputMessage.trim() || isLoading) return;

    const userMessage = {
      role: 'user' as const,
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: [...messages, userMessage].map(msg => ({
            role: msg.role,
            content: msg.content
          }))
        }),
      });

      if (!response.ok) throw new Error('Failed to get response');

      const data = await response.json();
      
      setMessages(prev => [...prev, {
        role: 'assistant',
        content: data.message,
        timestamp: new Date()
      }]);
    } catch (error) {
      console.error('Error:', error);
      setMessages(prev => [...prev, {
        role: 'assistant',
        content: "I apologize, but I'm having trouble connecting right now. Please try again later.",
        timestamp: new Date()
      }]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      {/* Chat Button */}
      <motion.button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 z-50 bg-black text-white rounded-full p-4 shadow-lg flex items-center gap-2"
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
      >
        <span className="text-sm font-medium">Ask Ayman AI</span>
        <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
        </svg>
      </motion.button>

      {/* Chat Overlay */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
            className="fixed bottom-24 right-6 z-50 w-96 bg-white rounded-2xl shadow-2xl overflow-hidden"
          >
            {/* Chat Header */}
            <div className="bg-black text-white p-4 flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 rounded-full bg-white/10 flex items-center justify-center">
                  AI
                </div>
                <div>
                  <h3 className="font-medium">Ayman AI</h3>
                  <p className="text-xs text-white/70">Always here to help</p>
                </div>
              </div>
              <button 
                onClick={() => setIsOpen(false)}
                className="text-white/70 hover:text-white"
              >
                <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            {/* Chat Messages */}
            <div className="h-96 overflow-y-auto p-4 bg-gray-50">
              {messages.map((message, index) => (
                <div
                  key={index}
                  className={`mb-4 flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-[80%] rounded-2xl px-4 py-2 ${
                      message.role === 'user'
                        ? 'bg-black text-white rounded-br-none'
                        : 'bg-gray-200 text-gray-900 rounded-bl-none'
                    }`}
                  >
                    <p className="text-sm">{message.content}</p>
                    <p className="text-xs mt-1 opacity-50">
                      {new Date(message.timestamp).toLocaleTimeString()}
                    </p>
                  </div>
                </div>
              ))}
              {isLoading && (
                <div className="flex justify-start mb-4">
                  <div className="bg-gray-200 text-gray-900 rounded-2xl rounded-bl-none px-4 py-2">
                    <div className="flex gap-1">
                      <span className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
                      <span className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '150ms' }} />
                      <span className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '300ms' }} />
                    </div>
                  </div>
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>

            {/* Chat Input */}
            <form onSubmit={handleSubmit} className="p-4 bg-white border-t">
              <div className="flex gap-2">
                <input
                  type="text"
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  placeholder="Ask me anything..."
                  className="flex-1 bg-gray-100 rounded-xl px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-black"
                />
                <button
                  type="submit"
                  disabled={isLoading || !inputMessage.trim()}
                  className="bg-black text-white rounded-xl px-4 py-2 text-sm font-medium disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Send
                </button>
              </div>
            </form>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}
```

## File: src\components\CreateAppScreen.tsx

```tsx
import React from 'react';

const CreateAppScreen: React.FC = () => {
  return (
    <div className="flex items-center justify-center h-full w-full bg-white">
      <button className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 shadow-lg">
        Create Your App
      </button>
    </div>
  );
};

export default CreateAppScreen;
```

## File: src\components\Footer.tsx

```tsx
'use client';

import Link from 'next/link';
import { motion } from 'framer-motion';
import { Archivo_Black } from 'next/font/google';

const archivo = Archivo_Black({
  weight: '400',
  subsets: ['latin'],
});

export default function Footer() {
  const currentYear = new Date().getFullYear();

  return (
    <footer className="bg-gray-900 text-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 md:py-16">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8 md:gap-12">
          {/* Brand Column */}
          <div className="space-y-4">
            <h2 className={`${archivo.className} text-2xl`}>AYMAN</h2>
            <p className="text-gray-400 text-sm max-w-xs">
              Mobile app development, design and consulting company for those who want to be successful
            </p>
            <div className="flex gap-4">
              {[
                { name: 'Twitter', href: '#', icon: 'M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z' },
                { name: 'LinkedIn', href: '#', icon: 'M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z' },
                { name: 'GitHub', href: '#', icon: 'M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z' }
              ].map((social) => (
                <motion.a
                  key={social.name}
                  href={social.href}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="w-10 h-10 bg-gray-800 rounded-full flex items-center justify-center hover:bg-gray-700 transition-colors"
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                >
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                    <path d={social.icon} />
                  </svg>
                </motion.a>
              ))}
            </div>
          </div>

          {/* Quick Links */}
          <div>
            <h3 className="font-semibold text-lg mb-4">Quick Links</h3>
            <ul className="space-y-2">
              {['Home', 'About', 'Services', 'Portfolio', 'Contact'].map((item) => (
                <li key={item}>
                  <Link 
                    href={`#${item.toLowerCase()}`}
                    className="text-gray-400 hover:text-white transition-colors"
                  >
                    {item}
                  </Link>
                </li>
              ))}
            </ul>
          </div>

          {/* Services */}
          <div>
            <h3 className="font-semibold text-lg mb-4">Services</h3>
            <ul className="space-y-2">
              {[
                'Mobile Development',
                'Web Development',
                'UI/UX Design',
                'Consulting',
                'Digital Marketing'
              ].map((service) => (
                <li key={service}>
                  <Link 
                    href="#services"
                    className="text-gray-400 hover:text-white transition-colors"
                  >
                    {service}
                  </Link>
                </li>
              ))}
            </ul>
          </div>

          {/* Contact Info */}
          <div>
            <h3 className="font-semibold text-lg mb-4">Contact Us</h3>
            <ul className="space-y-3 text-gray-400">
              <li className="flex items-center gap-2">
                <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
                <a href="mailto:taiayman13@gmail.com" className="hover:text-white transition-colors">
                  taiayman13@gmail.com
                </a>
              </li>
              <li className="flex items-center gap-2">
                <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                </svg>
                <a href="tel:+212765755723" className="hover:text-white transition-colors">
                  +212 765-755723
                </a>
              </li>
              <li className="flex items-center gap-2">
                <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
                <span>Casablanca, Morocco</span>
              </li>
            </ul>
          </div>
        </div>

        {/* Bottom Bar */}
        <div className="mt-12 pt-8 border-t border-gray-800 text-center text-gray-400 text-sm">
          <p>© {currentYear} AYMAN. All rights reserved.</p>
        </div>
      </div>
    </footer>
  );
}
```

## File: src\components\Hero.tsx

```tsx
'use client';

import { motion, AnimatePresence } from 'framer-motion';
import { useState, useEffect } from 'react';
import * as Flags from 'country-flag-icons/react/3x2';
import { Archivo_Black } from 'next/font/google';
import AIChatOverlay from './AIChatOverlay';
import PhoneCarousel from './PhoneCarousel';
import QuestionOverlay from './QuestionOverlay';
import '../styles/flags.css';
import Link from 'next/link';

const archivo = Archivo_Black({
  weight: '400',
  subsets: ['latin'],
});

const estimateTexts = [
  "Chhal khas nkhlss?", // Darija
  "Combien ça coûte?", // French
  "Get Project Estimate", // English
  "bCh7al had l'khedma?", // Darija
  "Quel est le prix?", // French
  "Calculate Price", // English
  "3tini taman?", // Darija
  "Prix du projet?", // French
  "Project Cost", // English
];

export default function Hero() {
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [showLanguages, setShowLanguages] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState<string>('');
  const [displayText, setDisplayText] = useState('');
  const [isQuestionOpen, setIsQuestionOpen] = useState(false);
  const [currentTextIndex, setCurrentTextIndex] = useState(0);
  const [currentAppType, setCurrentAppType] = useState<'marketplace' | 'vpn' | 'createapp'>('marketplace');

  const handleLanguageSelect = (language: string) => {
    setSelectedLanguage(language);
    setShowLanguages(false);
    setIsChatOpen(true);
  };

  useEffect(() => {
    let timeout: NodeJS.Timeout;
    const currentPhrase = estimateTexts[currentTextIndex];

    if (displayText === currentPhrase) {
      timeout = setTimeout(() => {
        setDisplayText('');
        setCurrentTextIndex((prev) => (prev + 1) % estimateTexts.length);
      }, 2000);
    } else {
      timeout = setTimeout(() => {
        setDisplayText(currentPhrase.slice(0, displayText.length + 1));
      }, 100);
    }

    return () => clearTimeout(timeout);
  }, [displayText, currentTextIndex]);

  const openWhatsApp = () => {
    window.open('https://wa.me/212765755723', '_blank');
  };

  const scrollToAbout = () => {
    const aboutSection = document.getElementById('about');
    if (aboutSection) {
      aboutSection.scrollIntoView({ behavior: 'smooth' });
    }
  };

  return (
    <>
      <AIChatOverlay
        isOpen={isChatOpen}
        onClose={() => setIsChatOpen(false)}
        selectedLanguage={selectedLanguage}
      />

      <section className="min-h-screen pt-16 md:pt-24 pb-24 md:pb-32 bg-[#fcf5eb] relative overflow-hidden">
        {/* Language Selection Overlay */}
        <AnimatePresence>
          {showLanguages && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center"
              onClick={() => setShowLanguages(false)}
            >
              <motion.div
                initial={{ scale: 0.8, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.8, opacity: 0 }}
                className="grid md:grid-cols-3 grid-cols-1 md:gap-6 gap-3 md:p-8 p-4 w-full md:max-w-[600px] max-w-[180px] mx-4"
                onClick={(e) => e.stopPropagation()}
              >
                {[
                  { name: 'English', code: 'GB', Flag: Flags.GB },
                  { name: 'French', code: 'FR', Flag: Flags.FR },
                  { name: 'Darija', code: 'MA', Flag: Flags.MA },
                ].map((lang, idx) => (
                  <motion.button
                    key={lang.name}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: idx * 0.1 }}
                    onClick={() => handleLanguageSelect(lang.name)}
                    className="w-16 h-16 md:w-24 md:h-24 rounded-full overflow-hidden hover:ring-4 hover:ring-gray-200 transition-all relative"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <div className="absolute inset-0 w-[150%] h-[150%] -translate-x-[16.67%] -translate-y-[16.67%]">
                      <lang.Flag className="w-full h-full object-cover" />
                    </div>
                  </motion.button>
                ))}
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Vertical GET PROPOSAL text */}
        <div className="hidden md:block absolute top-24 right-8 transform -rotate-90 origin-right">
          <div className="flex items-center gap-3">
            <div className="w-8 h-[2px] bg-gray-900" />
            <span className="text-gray-900 tracking-widest text-sm font-bold uppercase">
              Get Proposal
            </span>
          </div>
        </div>

        {/* Mobile GET PROPOSAL text */}
        <div className="block md:hidden absolute top-6 right-4">
          <div className="flex items-center gap-2">
            <span className="text-gray-900 tracking-widest text-xs font-bold uppercase">
              Get Proposal
            </span>
            <div className="w-4 h-[2px] bg-gray-900" />
          </div>
        </div>

        {/* Vertical KNOW US text - Desktop Only */}
        <motion.div 
          className="hidden md:block absolute bottom-24 left-8 transform rotate-90 origin-left cursor-pointer"
          onClick={scrollToAbout}
          whileHover={{ x: 5 }}
          whileTap={{ scale: 0.95 }}
        >
          <div className="flex items-center gap-3 group">
            <span className="text-gray-900 tracking-widest text-sm font-bold uppercase group-hover:text-primary transition-colors">
              Know Us
            </span>
            <div className="flex items-center gap-2">
              <div className="w-8 h-[2px] bg-gray-900 group-hover:bg-primary transition-colors" />
              <motion.svg 
                className="w-3 h-3 text-gray-900 fill-current group-hover:text-primary transition-colors"
                viewBox="0 0 24 24"
                animate={{ x: [0, 5, 0] }}
                transition={{ repeat: Infinity, duration: 1.5 }}
              >
                <path d="M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8-8-8z" />
              </motion.svg>
            </div>
          </div>
        </motion.div>

        {/* Background Dots Pattern */}
        <div className="absolute inset-0">
          <div
            className="absolute inset-0"
            style={{
              backgroundImage: 'radial-gradient(circle, #E5E7EB 1.5px, transparent 1.5px)',
              backgroundSize: '24px 24px',
              opacity: '0.1',
            }}
          />
        </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          {/* Main Content Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 md:gap-12 items-center">
            {/* Text Content */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              className="max-w-xl mx-auto md:mx-0 md:pl-16 text-center md:text-left order-1 md:order-1 pt-6 sm:pt-8 md:pt-0"
            >
              <h1
                className={`${archivo.className} text-[3.5rem] sm:text-[4rem] md:text-[8.5rem] leading-[1.1] md:leading-[0.9] font-bold text-gray-900 mb-4 md:mb-8 tracking-tight`}
              >
                BUILD
                <br className="hidden md:block" /> YOUR
                <br className="hidden md:block" /> DREAM
              </h1>
              <p className="text-base md:text-xl text-gray-600 mb-4 md:mb-10 leading-relaxed max-w-md mx-auto md:mx-0">
                Mobile app development, design and consulting company for those who want to be
                successful
              </p>
              <div className="flex flex-col sm:flex-row items-center justify-center md:justify-start gap-4 md:gap-6">
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={openWhatsApp}
                  className="w-full sm:w-[200px] bg-[#1a1a1a] text-white px-6 py-3 md:py-4 rounded-xl md:rounded-none font-medium transition-all text-lg relative overflow-hidden flex items-center justify-center"
                >
                  Contact Us
                </motion.button>
                <button
                  onClick={() => setIsQuestionOpen(true)}
                  className="w-full sm:w-[340px] h-[48px] md:h-[56px] px-6 border border-[#1a1a1a] bg-[#faf5f0] text-[#1a1a1a] rounded-xl md:rounded-none font-medium transition-all text-lg text-center group relative"
                >
                  <span className="absolute inset-0 flex items-center justify-between px-6">
                    <span className="min-w-[240px] text-left whitespace-nowrap overflow-hidden">
                      {displayText}
                      <span className="inline-block w-0.5 h-5 bg-current animate-blink ml-1"></span>
                    </span>
                    <svg
                      className="w-5 h-5 transition-transform group-hover:translate-x-1 flex-shrink-0"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="2"
                        d="M17 8l4 4m0 0l-4 4m4-4H3"
                      />
                    </svg>
                  </span>
                </button>
              </div>
            </motion.div>

            {/* Phone Mockup */}
            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6, delay: 0.2 }}
              className="relative flex flex-col items-center order-1 md:order-2 -mx-4 md:mx-0 mt-4 md:mt-0"
            >
              <div className="flex flex-col items-center">
                {/* Phone Carousel with centered GitHub link */}
                <div className="scale-[0.85] md:scale-100 transform-gpu relative w-[300px] h-[600px]">
                  <PhoneCarousel onAppTypeChange={setCurrentAppType} />
                  
                  {/* GitHub/Play Store Link - Centered positioning with increased bottom spacing */}
                  <div className="absolute -bottom-16 left-0 right-0 flex justify-center">
                    <motion.a
                      href={currentAppType === 'vpn' 
                        ? 'https://play.google.com/store/apps/details?id=com.tindy.vpn' 
                        : 'https://github.com/taiayman/Morjib-app'}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center gap-3 text-gray-900 hover:text-gray-700 transition-colors group bg-white px-6 py-3 rounded-full hover:bg-gray-50 shadow-md"
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: 0.4 }}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      {currentAppType === 'vpn' ? (
                        <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M3,20.5V3.5C3,2.91 3.34,2.39 3.84,2.15L13.69,12L3.84,21.85C3.34,21.6 3,21.09 3,20.5M16.81,15.12L6.05,21.34L14.54,12.85L16.81,15.12M20.16,10.81C20.5,11.08 20.75,11.5 20.75,12C20.75,12.5 20.53,12.9 20.18,13.18L17.89,14.5L15.39,12L17.89,9.5L20.16,10.81M6.05,2.66L16.81,8.88L14.54,11.15L6.05,2.66Z" />
                        </svg>
                      ) : (
                        <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                        </svg>
                      )}
                      <span className="text-base font-medium">
                        {currentAppType === 'vpn' ? 'See the app' : 'See the project'}
                      </span>
                      <svg
                        className="w-5 h-5 transform transition-transform group-hover:translate-x-1"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M17 8l4 4m0 0l-4 4m4-4H3"
                        />
                      </svg>
                    </motion.a>
                  </div>
                </div>
              </div>
            </motion.div>
          </div>
        </div>

        {/* Background Pattern - Optional */}
        <div className="absolute inset-0 pointer-events-none">
          <div
            className="absolute inset-0 opacity-[0.03]"
            style={{
              backgroundImage:
                'radial-gradient(circle at 4px 4px, #000 2px, transparent 0)',
              backgroundSize: '48px 48px',
            }}
          />
        </div>
      </section>

      <QuestionOverlay isOpen={isQuestionOpen} onClose={() => setIsQuestionOpen(false)} />

      {/* Mobile Bottom Navigation Bar */}
      <div className="fixed bottom-0 left-0 right-0 z-50 md:hidden">
        <div className="bg-white border-t border-gray-200 px-6 py-2 backdrop-blur-lg bg-white/80">
          <div className="flex justify-between items-center">
            <a href="/services" className="flex flex-col items-center p-2 text-gray-600 hover:text-primary transition-colors">
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
              </svg>
              <span className="text-xs mt-1">Services</span>
            </a>
            
            <a href="/portfolio" className="flex flex-col items-center p-2 text-gray-600 hover:text-primary transition-colors">
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
              </svg>
              <span className="text-xs mt-1">Portfolio</span>
            </a>
            
            <a href="/about" className="flex flex-col items-center p-2 text-gray-600 hover:text-primary transition-colors">
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              <span className="text-xs mt-1">About</span>
            </a>
            
            <Link
              href="/blog/"
              className="text-sm text-gray-600 hover:text-gray-900"
            >
              Read More
            </Link>
          </div>
        </div>
      </div>
    </>
  );
}
```

## File: src\components\home\Contact.tsx

```tsx
import Container from '../ui/Container'
import Button from '../ui/Button'

export default function Contact() {
  return (
    <section id="contact" className="py-16">
      <Container>
        <div className="max-w-xl mx-auto space-y-8">
          <div className="text-center">
            <h2 className="text-3xl font-bold">Get in Touch</h2>
            <p className="mt-4 text-gray-600">Have a question or want to work together?</p>
          </div>
          <form className="space-y-6">
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                Name
              </label>
              <input
                type="text"
                id="name"
                name="name"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              />
            </div>
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                type="email"
                id="email"
                name="email"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              />
            </div>
            <div>
              <label htmlFor="message" className="block text-sm font-medium text-gray-700">
                Message
              </label>
              <textarea
                id="message"
                name="message"
                rows={4}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              />
            </div>
            <Button type="submit" className="w-full">
              Send Message
            </Button>
          </form>
        </div>
      </Container>
    </section>
  )
}
```

## File: src\components\home\Hero.tsx

```tsx
import Image from 'next/image'
import Container from '../ui/Container'
import Button from '../ui/Button'

export default function Hero() {
  return (
    <section className="pt-24 pb-16">
      <Container>
        <div className="flex flex-col items-center text-center gap-8">
          <Image
            src="/images/hero-bg.png"
            alt="Hero background"
            width={120}
            height={120}
            className="rounded-full"
          />
          <h1 className="text-4xl sm:text-5xl md:text-6xl font-bold">
            Hi, I&apos;m <span className="text-blue-600">Your Name</span>
          </h1>
          <p className="text-xl text-gray-600 max-w-2xl">
            A passionate full-stack developer specializing in building exceptional digital experiences.
          </p>
          <div className="flex gap-4">
            <Button size="lg">View Projects</Button>
            <Button variant="secondary" size="lg">Contact Me</Button>
          </div>
        </div>
      </Container>
    </section>
  )
}
```

## File: src\components\home\Projects.tsx

```tsx
import { projects } from '@/constants/projects'
import Container from '../ui/Container'
import ProjectCard from '../shared/ProjectCard'

export default function Projects() {
  return (
    <section id="projects" className="py-16">
      <Container>
        <div className="space-y-8">
          <div className="text-center">
            <h2 className="text-3xl font-bold">My Projects</h2>
            <p className="mt-4 text-gray-600">Here are some of my recent works</p>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {projects.map((project) => (
              <ProjectCard key={project.title} {...project} />
            ))}
          </div>
        </div>
      </Container>
    </section>
  )
}
```

## File: src\components\home\Services.tsx

```tsx
import Container from '../ui/Container'
import ServiceCard from '../shared/ServiceCard'

const services = [
  {
    title: 'Web Development',
    description: 'Building responsive and modern web applications using the latest technologies.',
    icon: '💻'
  },
  {
    title: 'Mobile Development',
    description: 'Creating cross-platform mobile applications for iOS and Android.',
    icon: '📱'
  },
  {
    title: 'UI/UX Design',
    description: 'Designing beautiful and intuitive user interfaces and experiences.',
    icon: '🎨'
  }
]

export default function Services() {
  return (
    <section id="services" className="py-16 bg-gray-50">
      <Container>
        <div className="space-y-8">
          <div className="text-center">
            <h2 className="text-3xl font-bold">My Services</h2>
            <p className="mt-4 text-gray-600">Here&apos;s what I can do for you</p>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {services.map((service) => (
              <ServiceCard key={service.title} {...service} />
            ))}
          </div>
        </div>
      </Container>
    </section>
  )
}
```

## File: src\components\LanguageSelector.tsx

```tsx

```

## File: src\components\layout\Footer.tsx

```tsx
import Container from '../ui/Container'

export default function Footer() {
  return (
    <footer className="bg-gray-50">
      <Container>
        <div className="py-8 text-center">
          <p className="text-gray-600">
            © {new Date().getFullYear()} Your Name. All rights reserved.
          </p>
        </div>
      </Container>
    </footer>
  )
}
```

## File: src\components\layout\Navbar.tsx

```tsx
'use client';

import Link from 'next/link'
import { navigation } from '@/constants/navigation'
import Container from '../ui/Container'

export default function Navbar() {
  const scrollToSection = (e: React.MouseEvent<HTMLAnchorElement>, sectionId: string) => {
    e.preventDefault();
    if (sectionId === '/') {
      window.scrollTo({ top: 0, behavior: 'smooth' });
      return;
    }
    const element = document.querySelector(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' });
    }
  };

  return (
    <header className="fixed w-full bg-white/80 backdrop-blur-sm z-50">
      <Container>
        <nav className="flex items-center justify-between py-4">
          <Link href="/" className="text-xl font-bold">
            Logo
          </Link>
          <ul className="hidden md:flex items-center gap-8">
            {navigation.map((item) => (
              <li key={item.path}>
                <a
                  href={item.path}
                  onClick={(e) => scrollToSection(e, item.path.replace('/', '#'))}
                  className="hover:text-gray-600 transition cursor-pointer"
                >
                  {item.name}
                </a>
              </li>
            ))}
          </ul>
        </nav>
      </Container>
    </header>
  )
}
```

## File: src\components\Navbar.tsx

```tsx
'use client';

import Link from 'next/link';
import { useState } from 'react';
import AnimatedLogo from './AnimatedLogo';

const menuItems = [
  { label: 'Services', href: '/services' },
  { label: 'Portfolio', href: '/portfolio' },
  { label: 'About', href: '/about' },
  { label: 'Blog', href: '/blog' },
];

export default function Navbar() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <nav className="fixed top-0 left-0 right-0 backdrop-blur-md z-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          {/* Logo */}
          <div className="flex lg:flex-1">
            <a href="#" className="-m-1.5 p-1.5">
              <AnimatedLogo />
            </a>
          </div>

          {/* Desktop Menu */}
          <div className="hidden md:flex items-center space-x-8">
            {menuItems.map((item) => (
              <Link
                key={item.label}
                href={item.href}
                className="text-gray-900 hover:text-primary transition-colors duration-200 font-medium"
              >
                {item.label}
              </Link>
            ))}
          </div>

          {/* Mobile Menu Button */}
          <div className="md:hidden">
            <button
              onClick={() => setIsOpen(!isOpen)}
              className="inline-flex items-center justify-center p-2 rounded-md text-gray-900 hover:text-primary"
            >
              <span className="sr-only">Open main menu</span>
              {!isOpen ? (
                <svg
                  className="block h-6 w-6"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M4 6h16M4 12h16M4 18h16"
                  />
                </svg>
              ) : (
                <svg
                  className="block h-6 w-6"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              )}
            </button>
          </div>
        </div>
      </div>

      {/* Mobile Menu */}
      {isOpen && (
        <div className="md:hidden">
          <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-white">
            {menuItems.map((item) => (
              <Link
                key={item.label}
                href={item.href}
                className="block px-3 py-2 text-gray-900 hover:text-primary transition-colors duration-200 font-medium"
                onClick={() => setIsOpen(false)}
              >
                {item.label}
              </Link>
            ))}
          </div>
        </div>
      )}
    </nav>
  );
}
```

## File: src\components\PhoneCarousel.tsx

```tsx
'use client';

import { useState, useEffect, useRef } from 'react';
import { motion, useAnimation, PanInfo } from 'framer-motion';
import PhoneFrame from './PhoneFrame';
import { Archivo_Black } from 'next/font/google';

const phoneFrames = [
  { id: 1, appType: 'marketplace' as const },
  { id: 2, appType: 'vpn' as const },
  { id: 3, appType: 'createapp' as const },
  // Add more cards as needed
];

interface DeviceDisplayProps {
  onAppTypeChange?: (appType: 'marketplace' | 'vpn' | 'createapp') => void;
}

const archivo = Archivo_Black({
  weight: '400',
  subsets: ['latin'],
});

export default function DeviceDisplay({ onAppTypeChange }: DeviceDisplayProps) {
  const [currentIndex, setCurrentIndex] = useState(phoneFrames.length - 1);
  const [resetCounter, setResetCounter] = useState(0);
  
  // Create individual animation controls for each frame
  const frame1Controls = useAnimation();
  const frame2Controls = useAnimation();
  const frame3Controls = useAnimation();
  
  const animationControlsRef = useRef([frame1Controls, frame2Controls, frame3Controls]);

  useEffect(() => {
    // Reset animation controls if needed
    if (resetCounter > 0) {
      animationControlsRef.current.forEach(control => control.set({ x: 0, opacity: 1 }));
    }
  }, [resetCounter]);

  useEffect(() => {
    return () => {
      // Cleanup if necessary
    };
  }, [currentIndex]);

  useEffect(() => {
    // Notify parent of app type change
    onAppTypeChange?.(phoneFrames[currentIndex].appType);
  }, [currentIndex, onAppTypeChange]);

  const swiped = (direction: 'left' | 'right', index: number) => {
    if (index === 0) {
      // Reset the deck when the last card is swiped
      setTimeout(() => {
        setCurrentIndex(phoneFrames.length - 1);
        setResetCounter((prev) => prev + 1);
      }, 250);
    } else {
      setCurrentIndex(index - 1);
    }
  };

  const handlePrevious = () => {
    const newIndex = currentIndex === phoneFrames.length - 1 ? 0 : currentIndex + 1;
    setCurrentIndex(newIndex);
    onAppTypeChange?.(phoneFrames[newIndex].appType);
  };

  const handleNext = () => {
    if (currentIndex === 0) {
      setCurrentIndex(phoneFrames.length - 1);
      setResetCounter((prev) => prev + 1);
    } else {
      setCurrentIndex(currentIndex - 1);
    }
    onAppTypeChange?.(phoneFrames[currentIndex === 0 ? phoneFrames.length - 1 : currentIndex - 1].appType);
  };

  const phoneFramesReversed = [...phoneFrames].reverse();

  return (
    <div className="relative w-[300px] h-[600px] mx-auto">
      {/* Navigation Buttons */}
      <button
        onClick={handlePrevious}
        className="absolute left-[-40px] top-1/2 transform -translate-y-1/2 z-10 bg-white hover:bg-gray-50 text-gray-800 rounded-full p-2 transition-all"
        aria-label="Previous"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          strokeWidth={2}
          stroke="currentColor"
          className="w-6 h-6"
        >
          <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
        </svg>
      </button>
      <button
        onClick={handleNext}
        className="absolute right-[-40px] top-1/2 transform -translate-y-1/2 z-10 bg-white hover:bg-gray-50 text-gray-800 rounded-full p-2 transition-all"
        aria-label="Next"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          strokeWidth={2}
          stroke="currentColor"
          className="w-6 h-6"
        >
          <path strokeLinecap="round" strokeLinejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
        </svg>
      </button>
      <div className="absolute inset-0">
        {phoneFramesReversed.map((phone, i) => {
          const index = phoneFrames.length - 1 - i;
          const isCurrent = index === currentIndex;

          const controls = animationControlsRef.current[index];

          // Only render cards that haven't been swiped yet
          if (index > currentIndex) {
            return null;
          }

          return (
            <motion.div
              key={`${phone.id}-${resetCounter}`}
              className="absolute w-full h-full"
              style={{
                zIndex: index,
                pointerEvents: isCurrent ? 'auto' : 'none',
              }}
              initial={{ scale: 0.95, y: 20 }}
              animate={controls}
              transition={{ duration: 0.3 }}
              drag={isCurrent ? 'x' : false}
              dragConstraints={{ left: 0, right: 0 }}
              dragElastic={0.2}
              dragMomentum={false}
              onDragEnd={(event, info: PanInfo) => {
                if (info.offset.x < -100) {
                  // Swiped left
                  controls
                    .start({
                      x: -window.innerWidth,
                      rotate: -15,
                      transition: { duration: 0.5 },
                    })
                    .then(() => {
                      swiped('left', index);
                      controls.set({ x: 0, rotate: 0 });
                    });
                } else if (info.offset.x > 100) {
                  // Swiped right
                  controls
                    .start({
                      x: window.innerWidth,
                      rotate: 15,
                      transition: { duration: 0.5 },
                    })
                    .then(() => {
                      swiped('right', index);
                      controls.set({ x: 0, rotate: 0 });
                    });
                } else {
                  // If swipe threshold not met, card snaps back automatically
                  controls.start({ x: 0, rotate: 0 });
                }
              }}
            >
              <PhoneFrame appType={phone.appType}>
                {phone.appType === 'createapp' && (
                  <div className="h-full w-full flex flex-col items-center justify-center bg-[#fcf5eb] p-6">
                    <div className="mb-8 text-center">
                      <h2 className={`${archivo.className} text-2xl text-gray-900 mb-3`}>CREATE YOUR APP</h2>
                      <div className="flex items-center gap-3 justify-center">
                        <div className="w-8 h-[2px] bg-gray-900" />
                        <p className="text-gray-600 text-sm uppercase tracking-wider">Start Building</p>
                        <div className="w-8 h-[2px] bg-gray-900" />
                      </div>
                    </div>
                    
                    {/* Icon Grid */}
                    <div className="grid grid-cols-2 gap-4 mb-8 w-full max-w-xs">
                      <div className="flex flex-col items-center p-3 bg-white/80 backdrop-blur-sm rounded-2xl shadow-sm border border-gray-100">
                        <svg className="w-8 h-8 text-[#E31837] mb-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                          <path strokeLinecap="round" strokeLinejoin="round" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z" />
                        </svg>
                        <span className="text-xs font-medium text-gray-900 uppercase tracking-wide">Mobile</span>
                      </div>
                      <div className="flex flex-col items-center p-3 bg-white/80 backdrop-blur-sm rounded-2xl shadow-sm border border-gray-100">
                        <svg className="w-8 h-8 text-[#E31837] mb-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                          <path strokeLinecap="round" strokeLinejoin="round" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" />
                        </svg>
                        <span className="text-xs font-medium text-gray-900 uppercase tracking-wide">Web</span>
                      </div>
                      <div className="flex flex-col items-center p-3 bg-white/80 backdrop-blur-sm rounded-2xl shadow-sm border border-gray-100">
                        <svg className="w-8 h-8 text-[#E31837] mb-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                          <path strokeLinecap="round" strokeLinejoin="round" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                        </svg>
                        <span className="text-xs font-medium text-gray-900 uppercase tracking-wide">Desktop</span>
                      </div>
                      <div className="flex flex-col items-center p-3 bg-white/80 backdrop-blur-sm rounded-2xl shadow-sm border border-gray-100">
                        <svg className="w-8 h-8 text-[#E31837] mb-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                          <path strokeLinecap="round" strokeLinejoin="round" d="M13 10V3L4 14h7v7l9-11h-7z" />
                        </svg>
                        <span className="text-xs font-medium text-gray-900 uppercase tracking-wide">Fast</span>
                      </div>
                    </div>

                    <button 
                      onClick={() => window.open('https://wa.me/212765755723', '_blank')}
                      className="group relative px-8 py-4 bg-[#E31837] text-white rounded-xl hover:bg-[#c41530] transition-all duration-300 shadow-lg text-lg uppercase tracking-wider font-medium overflow-hidden"
                    >
                      <span className="relative z-10">Start Creating</span>
                      <div className="absolute inset-0 bg-gradient-to-r from-[#E31837] to-[#c41530] transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300 origin-left" />
                    </button>
                  </div>
                )}
              </PhoneFrame>
            </motion.div>
          );
        })}
      </div>
    </div>
  );
}
```

## File: src\components\PhoneFrame.tsx

```tsx
'use client';

import { motion, AnimatePresence } from 'framer-motion';
import { useState, useEffect } from 'react';
import Image from 'next/image';

interface PhoneFrameProps {
  appType: 'vpn' | 'marketplace' | 'createapp';
  children?: React.ReactNode;
}

interface CartItem {
  id: number;
  name: string;
  price: string;
  image: string;
  quantity: number;
}

const allChocolates = [
  {
    id: 1,
    name: 'Rochers noix de coco',
    price: '54.20 MAD',
    rating: 4.7,
    reviews: 155,
    image: '/noix-de-coco.png'
  },
  {
    id: 2,
    name: 'Ferrero Rocher Collection',
    price: '150.00 MAD',
    rating: 4.6,
    reviews: 407,
    image: '/rocher-collection.png'
  },
  {
    id: 3,
    name: 'Ferrero Rocher Dark',
    price: '165.00 MAD',
    rating: 4.8,
    reviews: 234,
    image: '/rocher-collection.png'
  },
  {
    id: 4,
    name: 'Ferrero Rocher White',
    price: '145.00 MAD',
    rating: 4.5,
    reviews: 189,
    image: '/rocher-collection.png'
  },
  {
    id: 5,
    name: 'Ferrero Rocher Hazelnut',
    price: '158.00 MAD',
    rating: 4.9,
    reviews: 312,
    image: '/rocher-collection.png'
  },
  {
    id: 6,
    name: 'Ferrero Rocher Almond',
    price: '162.00 MAD',
    rating: 4.7,
    reviews: 276,
    image: '/rocher-collection.png'
  }
];

export default function PhoneFrame({ appType, children }: PhoneFrameProps) {
  const [currentTime, setCurrentTime] = useState<string>('00:00');
  const [currentView, setCurrentView] = useState<'home' | 'supermarket' | 'allChocolates' | 'cart'>('home');
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [checkoutState, setCheckoutState] = useState<'cart' | 'payment' | 'success' | 'tracking'>('cart');
  const [orderId] = useState(`CH${Math.floor(Math.random() * 10000)}`);
  const [isVpnConnected, setIsVpnConnected] = useState(false);
  const [sessionTime, setSessionTime] = useState("04:45");
  const [vpnScreen, setVpnScreen] = useState<'main' | 'servers'>('main');
  const [vpnCountry] = useState({ name: "United States", ping: "17 ms", flag: "" });

  const vpnServers = [
    { id: 1, name: "New York", ping: "12 ms", flag: "" },
    { id: 2, name: "Los Angeles", ping: "45 ms", flag: "" },
    { id: 3, name: "Chicago", ping: "28 ms", flag: "" },
    { id: 4, name: "Miami", ping: "33 ms", flag: "" },
    { id: 5, name: "Dallas", ping: "39 ms", flag: "" },
    { id: 6, name: "Seattle", ping: "51 ms", flag: "" },
    { id: 7, name: "Boston", ping: "15 ms", flag: "" },
    { id: 8, name: "Houston", ping: "42 ms", flag: "" },
  ];

  useEffect(() => {
    const updateTime = () => {
      const now = new Date();
      const hours = now.getHours().toString().padStart(2, '0');
      const minutes = now.getMinutes().toString().padStart(2, '0');
      setCurrentTime(`${hours}:${minutes}`);
    };

    updateTime();
    const interval = setInterval(updateTime, 1000);

    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    if (checkoutState === 'payment') {
      const timer = setTimeout(() => {
        setCheckoutState('success');
      }, 2000);
      return () => clearTimeout(timer);
    }
  }, [checkoutState]);

  useEffect(() => {
    if (isVpnConnected) {
      const interval = setInterval(() => {
        setSessionTime(current => {
          const [minutes, seconds] = current.split(':').map(Number);
          if (minutes === 0 && seconds === 0) {
            setIsVpnConnected(false);
            return '00:00';
          }
          let newSeconds = seconds - 1;
          let newMinutes = minutes;
          if (newSeconds < 0) {
            newSeconds = 59;
            newMinutes -= 1;
          }
          return `${String(newMinutes).padStart(2, '0')}:${String(newSeconds).padStart(2, '0')}`;
        });
      }, 1000);
      return () => clearInterval(interval);
    }
  }, [isVpnConnected]);

  const addToCart = (product: typeof allChocolates[0]) => {
    setCartItems(prevItems => {
      const existingItem = prevItems.find(item => item.id === product.id);
      if (existingItem) {
        return prevItems.map(item =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      }
      return [...prevItems, { ...product, quantity: 1 }];
    });
    setCurrentView('cart');
  };

  const updateQuantity = (id: number, change: number) => {
    setCartItems(prevItems => {
      return prevItems.map(item => {
        if (item.id === id) {
          const newQuantity = Math.max(0, item.quantity + change);
          return newQuantity === 0 ? null : { ...item, quantity: newQuantity };
        }
        return item;
      }).filter(Boolean) as CartItem[];
    });
  };

  const totalAmount = cartItems.reduce((sum, item) => {
    const price = parseFloat(item.price.replace(' MAD', ''));
    return sum + price * item.quantity;
  }, 0);

  return (
    <div className="relative w-[300px] h-[600px] mx-auto select-none">
      <div className="absolute inset-0 bg-gray-900 rounded-[3rem] shadow-2xl">
        <div className="absolute inset-[8px] bg-white rounded-[2.5rem] overflow-hidden">
          {/* Status Bar - Different color based on app type */}
          <div className={`absolute top-0 inset-x-0 h-7 ${appType === 'marketplace' ? 'bg-[#E31837]' : 'bg-gray-100'} z-20`}>
            <div className={`absolute top-1.5 left-6 ${appType === 'marketplace' ? 'text-white' : 'text-black'} text-sm font-medium`}>
              {currentTime}
            </div>
            <div className="absolute top-0 left-1/2 -translate-x-1/2 h-6 w-24 bg-black rounded-b-3xl" />
            <div className="absolute top-1.5 right-6 flex items-center space-x-1.5">
              <div className="text-xs text-black">14%</div>
              <svg className="w-4 h-4 text-black" viewBox="0 0 24 24">
                <path fill="currentColor" d="M16,20H8V6H16M16.67,4H15V2H9V4H7.33A1.33,1.33 0 0,0 6,5.33V20.67C6,21.4 6.6,22 7.33,22H16.67A1.33,1.33 0 0,0 18,20.67V5.33C18,4.6 17.4,4 16.67,4Z" />
              </svg>
              <svg className="w-4 h-4 text-black" viewBox="0 0 24 24">
                <path fill="currentColor" d="M12,21L15.6,16.2C14.6,15.45 13.35,15 12,15C10.65,15 9.4,15.45 8.4,16.2L12,21M12,3C7.95,3 4.21,4.34 1.2,6.6L3,9C5.5,7.12 8.62,6 12,6C15.38,6 18.5,7.12 21,9L22.8,6.6C19.79,4.34 16.05,3 12,3M12,9C9.3,9 6.81,9.89 4.8,11.4L6.6,13.8C8.1,12.67 9.97,12 12,12C14.03,12 15.9,12.67 17.4,13.8L19.2,11.4C17.19,9.89 14.7,9 12,9Z" />
              </svg>
            </div>
          </div>

          {/* Conditional rendering based on appType */}
          {appType === 'createapp' ? (
            <div className="absolute inset-0 bg-white">
              {children}
            </div>
          ) : appType === 'marketplace' ? (
            <div className="absolute inset-0 bg-[#F5E6D3]">
              {/* Marketplace App Content */}
              <AnimatePresence mode="wait">
                {currentView === 'home' ? (
                  <motion.div
                    key="home"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="h-full"
                  >
                    {/* Home Screen Content */}
                    <div className="bg-[#E31837] pt-7 pb-3 px-4">
                      <div className="flex items-center justify-between gap-2">
                        {/* Search Bar */}
                        <div className="flex-1 relative">
                          <div className="bg-white rounded-full pl-9 pr-3 py-2 w-full">
                            <input
                              type="text"
                              placeholder="Search"
                              className="w-full text-sm outline-none text-gray-600 placeholder-gray-500"
                            />
                          </div>
                          <div className="absolute left-3 top-1/2 -translate-y-1/2">
                            <svg className="w-4 h-4 text-gray-400" viewBox="0 0 24 24">
                              <path fill="currentColor" d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z" />
                            </svg>
                          </div>
                        </div>

                        {/* Cart Button */}
                        <button className="w-9 h-9 bg-white rounded-full flex items-center justify-center flex-shrink-0">
                          <svg className="w-5 h-5 text-[#E31837]" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M17 18c-1.11 0-2 .89-2 2s.89 2 2 2 2-.89 2-2-.89-2-2-2M1 2v2h2l3.6 7.59-1.36 2.45c-.15.28-.24.61-.24.96 0 1.1.9 2 2 2h12v-2H7.42c-.13 0-.25-.11-.25-.25 0-.05.01-.09.03-.12L8.1 13h7.45c.75 0 1.41-.42 1.75-1.03l3.58-6.47c.07-.16.12-.33.12-.5 0-.55-.45-1-1-1H5.21l-.94-2M7 18c-1.11 0-2 .89-2 2s.89 2 2 2 2-.89 2-2-.89-2-2-2z" />
                          </svg>
                        </button>
                      </div>
                    </div>

                    {/* Location Bar */}
                    <div className="bg-[#E8D5B5] px-4 py-2.5 flex items-center space-x-2">
                      <svg className="w-5 h-5 text-[#E31837]" viewBox="0 0 24 24">
                        <path fill="currentColor" d="M12,11.5A2.5,2.5 0 0,1 9.5,9A2.5,2.5 0 0,1 12,6.5A2.5,2.5 0 0,1 14.5,9A2.5,2.5 0 0,1 12,11.5M12,2A7,7 0 0,0 5,9C5,14.25 12,22 12,22C12,22 19,14.25 19,9A7,7 0 0,0 12,2Z" />
                      </svg>
                      <span className="text-[#E31837] font-medium flex-1">Marrakesh</span>
                      <svg className="w-5 h-5 text-[#E31837]" viewBox="0 0 24 24">
                        <path fill="currentColor" d="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z" />
                      </svg>
                    </div>

                    {/* Categories */}
                    <div className="relative h-[calc(100%-140px)] flex items-center justify-center -mt-6">
                      <div className="relative w-[280px] h-[280px]">
                        {/* Top Circle - Supermarket */}
                        <div className="absolute top-0 left-1/2 -translate-x-1/2 w-[135px]">
                          <motion.button
                            whileTap={{ scale: 0.95 }}
                            onClick={() => setCurrentView('supermarket')}
                            className="w-full h-[135px] bg-white rounded-full flex flex-col items-center justify-center space-y-2 shadow-sm transform-gpu relative"
                          >
                            <div className="text-3xl">🛒</div>
                            <div className="text-base font-medium text-[#E31837] text-center">
                              Supermarket
                            </div>
                          </motion.button>
                        </div>

                        {/* Bottom Left Circle */}
                        <div className="absolute bottom-4 left-0 w-[135px]">
                          <motion.button
                            whileTap={{ scale: 0.95 }}
                            className="w-full h-[135px] bg-white rounded-full flex flex-col items-center justify-center space-y-2 shadow-sm transform-gpu"
                          >
                            <div className="text-3xl">🥬</div>
                            <div className="text-base font-medium text-[#E31837] text-center">
                              Traditional<br />Markets
                            </div>
                          </motion.button>
                        </div>

                        {/* Bottom Right Circle */}
                        <div className="absolute bottom-4 right-0 w-[135px]">
                          <motion.button
                            whileTap={{ scale: 0.95 }}
                            className="w-full h-[135px] bg-white rounded-full flex flex-col items-center justify-center space-y-2 shadow-sm transform-gpu"
                          >
                            <div className="text-3xl">📦</div>
                            <div className="text-base font-medium text-[#E31837] text-center">
                              Services &<br />Boutique
                            </div>
                          </motion.button>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                ) : currentView === 'supermarket' ? (
                  <motion.div
                    key="supermarket"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="h-full"
                  >
                    {/* Home Header */}
                    <div className="bg-[#E31837] pt-7 pb-3 px-4">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <h1 className="text-2xl text-title">Home</h1>
                          <div className="flex items-center bg-white rounded-full px-2.5 py-1">
                            <span className="text-yellow-400 text-sm">★</span>
                            <span className="text-sm font-semibold ml-1">10</span>
                            <span className="text-xs text-gray-500 ml-0.5">pts</span>
                          </div>
                        </div>
                        <div className="relative">
                          <button 
                            onClick={() => setCurrentView('cart')}
                            className="w-9 h-9 bg-white rounded-full flex items-center justify-center"
                          >
                            <svg className="w-4 h-4 text-[#E31837]" viewBox="0 0 24 24">
                              <path fill="currentColor" d="M17,18C15.89,18 15,18.89 15,20A2,2 0 0,0 17,22A2,2 0 0,0 19,20C19,18.89 18.1,18 17,18M1,2V4H3L6.6,11.59L5.24,14.04C5.09,14.32 5,14.65 5,15A2,2 0 0,0 7,17H19V15H7.42A0.25,0.25 0 0,1 7.17,14.75C7.17,14.7 7.18,14.66 7.2,14.63L8.1,13H15.55C16.3,13 16.96,12.58 17.3,11.97L20.88,5.5C20.95,5.34 21,5.17 21,5A1,1 0 0,0 20,4H5.21L4.27,2M7,18C5.89,18 5,18.89 5,20A2,2 0 0,0 7,22A2,2 0 0,0 9,20C9,18.89 8.1,18 7,18Z" />
                            </svg>
                            {cartItems.length > 0 && (
                              <div className="absolute top-0 -right-1 w-4 h-4 bg-white rounded-full flex items-center justify-center shadow-sm">
                                <span className="text-[10px] font-semibold text-[#E31837]">{cartItems.length}</span>
                              </div>
                            )}
                          </button>
                        </div>
                      </div>
                    </div>

                    {/* Location Bar */}
                    <div className="bg-[#E8D5B5] px-4 py-2.5 flex items-center">
                      <svg className="w-5 h-5 text-[#E31837] mr-2" viewBox="0 0 24 24">
                        <path fill="currentColor" d="M12,11.5A2.5,2.5 0 0,1 9.5,9A2.5,2.5 0 0,1 12,6.5A2.5,2.5 0 0,1 14.5,9A2.5,2.5 0 0,1 12,11.5M12,2A7,7 0 0,0 5,9C5,14.25 12,22 12,22C12,22 19,14.25 19,9A7,7 0 0,0 12,2Z" />
                      </svg>
                      <span className="text-[#E31837] text-subtitle flex-1">Casablanca</span>
                      <svg className="w-5 h-5 text-[#E31837]" viewBox="0 0 24 24">
                        <path fill="currentColor" d="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z" />
                      </svg>
                    </div>

                    {/* Search Bar */}
                    <div className="px-4 py-3">
                      <div className="bg-white rounded-full border-2 border-[#E31837] px-4 py-2.5 flex items-center">
                        <svg className="w-5 h-5 text-gray-400" viewBox="0 0 24 24">
                          <path fill="currentColor" d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
                        </svg>
                        <input
                          type="text"
                          placeholder="Search in Carrefour & more"
                          className="flex-1 text-sm text-body outline-none"
                        />
                      </div>
                    </div>

                    {/* Store Cards */}
                    <div className="px-4 grid grid-cols-2 gap-4">
                      {/* BIM Card */}
                      <div className="bg-white rounded-lg p-4 aspect-square flex flex-col items-center justify-center gap-3">
                        <div className="w-20 h-20 rounded-full border-2 border-[#E8D5B5] flex items-center justify-center">
                          <div className="w-16 h-16 relative">
                            <svg viewBox="0 0 400 400" className="w-full h-full">
                              <circle cx="200" cy="200" r="200" fill="#E31837"/>
                              <text 
                                x="200" 
                                y="230" 
                                textAnchor="middle" 
                                dominantBaseline="middle"
                                fontSize="140" 
                                fill="white" 
                                fontFamily="Arial Black" 
                                fontWeight="900"
                              >BIM</text>
                            </svg>
                          </div>
                        </div>
                        <span className="text-base text-subtitle text-gray-900">BIM</span>
                      </div>

                      {/* Marjane Card */}
                      <div className="bg-white rounded-lg p-4 aspect-square flex flex-col items-center justify-center gap-3">
                        <div className="w-20 h-20 rounded-full border-2 border-[#E8D5B5] flex items-center justify-center">
                          <div className="w-16 h-16 relative">
                            <svg viewBox="0 0 400 400" className="w-full h-full">
                              <circle cx="200" cy="200" r="200" fill="#004C97"/>
                              <text 
                                x="200" 
                                y="230" 
                                textAnchor="middle" 
                                dominantBaseline="middle"
                                fontSize="220" 
                                fill="white" 
                                fontFamily="Arial Black" 
                                fontWeight="900"
                              >M</text>
                            </svg>
                          </div>
                        </div>
                        <span className="text-base text-subtitle text-gray-900">Marjane</span>
                      </div>
                    </div>

                    {/* Products Section */}
                    <div className="mt-6 px-4">
                      <div className="flex items-center justify-between mb-4">
                        <h2 className="text-xl text-title text-gray-900">Chocolats</h2>
                        <button 
                          onClick={() => setCurrentView('allChocolates')}
                          className="text-[#E31837] text-button text-sm"
                        >
                          See all
                        </button>
                      </div>
                      <div className="grid grid-cols-2 gap-3">
                        {allChocolates.map((chocolate) => (
                          <motion.div
                            key={chocolate.id}
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            whileHover={{ y: -2 }}
                            whileTap={{ scale: 0.98 }}
                            transition={{ duration: 0.2 }}
                            className="bg-white rounded-2xl p-3 relative group"
                          >
                            <div className="absolute top-2 right-2 z-10">
                              <div className="bg-white/90 backdrop-blur-sm px-2 py-1 rounded-full text-xs font-semibold text-[#E31837]">
                                {chocolate.price}
                              </div>
                            </div>
                            
                            <div className="relative aspect-square mb-3 rounded-xl overflow-hidden">
                              <motion.div
                                whileHover={{ scale: 1.05 }}
                                transition={{ duration: 0.2 }}
                                className="h-full w-full"
                              >
                                <Image
                                  src={chocolate.image}
                                  alt={chocolate.name}
                                  fill
                                  className="object-cover"
                                />
                              </motion.div>
                            </div>
                            <div className="space-y-1">
                              <h3 className="text-sm font-medium text-gray-900 line-clamp-2 group-hover:text-[#E31837] transition-colors">
                                {chocolate.name}
                              </h3>
                              <div className="flex items-center gap-1">
                                <div className="flex items-center">
                                  {[...Array(5)].map((_, i) => (
                                    <svg
                                      key={i}
                                      className={`w-3 h-3 ${
                                        i < Math.floor(chocolate.rating)
                                          ? 'text-yellow-400'
                                          : 'text-gray-300'
                                      }`}
                                      fill="currentColor"
                                      viewBox="0 0 20 20"
                                    >
                                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                    </svg>
                                  ))}
                                </div>
                                <span className="text-xs text-gray-500">
                                  ({chocolate.reviews})
                                </span>
                              </div>
                            </div>
                            
                            <motion.button
                              whileHover={{ scale: 1.05 }}
                              whileTap={{ scale: 0.95 }}
                              onClick={() => addToCart(chocolate)}
                              className="mt-3 w-full bg-[#E31837] text-white py-2 rounded-xl text-sm font-medium hover:bg-[#d11731] transition-colors"
                            >
                              Add to Cart
                            </motion.button>
                          </motion.div>
                        ))}
                      </div>
                    </div>
                  </motion.div>
                ) : currentView === 'allChocolates' ? (
                  <motion.div
                    key="allChocolates"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="h-full"
                  >
                    {/* All Chocolates Header */}
                    <div className="bg-[#E31837] pt-7 pb-3 px-4">
                      <div className="flex items-center">
                        <button 
                          onClick={() => setCurrentView('supermarket')}
                          className="w-9 h-9 bg-white rounded-full flex items-center justify-center mr-4"
                        >
                          <svg className="w-5 h-5 text-[#E31837]" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z" />
                          </svg>
                        </button>
                        <h1 className="text-xl text-title text-white">All Chocolates</h1>
                      </div>
                    </div>

                    {/* Search Bar */}
                    <div className="px-4 py-3">
                      <div className="bg-white rounded-full border-2 border-[#E31837] px-4 py-2.5 flex items-center space-x-2">
                        <svg className="w-5 h-5 text-gray-400" viewBox="0 0 24 24">
                          <path fill="currentColor" d="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
                        </svg>
                        <input
                          type="text"
                          placeholder="Search chocolates"
                          className="flex-1 text-sm text-body outline-none"
                        />
                      </div>
                    </div>

                    {/* Chocolates Grid */}
                    <div className="flex-1 overflow-auto">
                      <div className="grid grid-cols-2 gap-3 p-4">
                        {allChocolates.map((chocolate) => (
                          <motion.div
                            key={chocolate.id}
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            whileHover={{ y: -2 }}
                            whileTap={{ scale: 0.98 }}
                            transition={{ duration: 0.2 }}
                            className="bg-white rounded-2xl p-3 relative group"
                          >
                            <div className="absolute top-2 right-2 z-10">
                              <div className="bg-white/90 backdrop-blur-sm px-2 py-1 rounded-full text-xs font-semibold text-[#E31837]">
                                {chocolate.price}
                              </div>
                            </div>
                            
                            <div className="relative aspect-square mb-3 rounded-xl overflow-hidden">
                              <motion.div
                                whileHover={{ scale: 1.05 }}
                                transition={{ duration: 0.2 }}
                                className="h-full w-full"
                              >
                                <Image
                                  src={chocolate.image}
                                  alt={chocolate.name}
                                  fill
                                  className="object-cover"
                                />
                              </motion.div>
                            </div>
                            
                            <div className="space-y-1">
                              <h3 className="text-sm font-medium text-gray-900 line-clamp-2 group-hover:text-[#E31837] transition-colors">
                                {chocolate.name}
                              </h3>
                              <div className="flex items-center gap-1">
                                <div className="flex items-center">
                                  {[...Array(5)].map((_, i) => (
                                    <svg
                                      key={i}
                                      className={`w-3 h-3 ${
                                        i < Math.floor(chocolate.rating)
                                          ? 'text-yellow-400'
                                          : 'text-gray-300'
                                      }`}
                                      fill="currentColor"
                                      viewBox="0 0 20 20"
                                    >
                                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                    </svg>
                                  ))}
                                </div>
                                <span className="text-xs text-gray-500">
                                  ({chocolate.reviews})
                                </span>
                              </div>
                            </div>
                            
                            <motion.button
                              whileHover={{ scale: 1.05 }}
                              whileTap={{ scale: 0.95 }}
                              onClick={() => addToCart(chocolate)}
                              className="mt-3 w-full bg-[#E31837] text-white py-2 rounded-xl text-sm font-medium hover:bg-[#d11731] transition-colors"
                            >
                              Add to Cart
                            </motion.button>
                          </motion.div>
                        ))}
                      </div>
                    </div>
                  </motion.div>
                ) : (
                  <motion.div
                    key="cart"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="h-full flex flex-col"
                  >
                    <AnimatePresence mode="wait">
                      {checkoutState === 'cart' && (
                        <motion.div
                          key="cart-content"
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          exit={{ opacity: 0 }}
                          className="h-full flex flex-col"
                        >
                          {/* Cart Header */}
                          <div className="bg-[#E31837] pt-7 pb-3 px-4">
                            <div className="flex items-center">
                              <button 
                                onClick={() => setCurrentView('supermarket')}
                                className="w-9 h-9 bg-white rounded-full flex items-center justify-center mr-4"
                              >
                                <svg className="w-5 h-5 text-[#E31837]" viewBox="0 0 24 24">
                                  <path fill="currentColor" d="M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z" />
                                </svg>
                              </button>
                              <h1 className="text-xl text-title text-white">Your Cart</h1>
                            </div>
                          </div>

                          {/* Cart Items */}
                          <div className="flex-1 overflow-auto bg-[#F5F3EE]">
                            {cartItems.length === 0 ? (
                              <div className="flex flex-col items-center justify-center h-full text-gray-500">
                                <svg className="w-16 h-16 mb-4" viewBox="0 0 24 24">
                                  <path fill="currentColor" d="M17,18C15.89,18 15,18.89 15,20A2,2 0 0,0 17,22A2,2 0 0,0 19,20C19,18.89 18.1,18 17,18M1,2V4H3L6.6,11.59L5.24,14.04C5.09,14.32 5,14.65 5,15A2,2 0 0,0 7,17H19V15H7.42A0.25,0.25 0 0,1 7.17,14.75C7.17,14.7 7.18,14.66 7.2,14.63L8.1,13H15.55C16.3,13 16.96,12.58 17.3,11.97L20.88,5.5C20.95,5.34 21,5.17 21,5A1,1 0 0,0 20,4H5.21L4.27,2M7,18C5.89,18 5,18.89 5,20A2,2 0 0,0 7,22A2,2 0 0,0 9,20C9,18.89 8.1,18 7,18Z" />
                                </svg>
                                <p className="text-lg text-subtitle">Your cart is empty</p>
                              </div>
                            ) : (
                              <div className="p-4 space-y-3">
                                {cartItems.map((item) => (
                                  <motion.div
                                    key={item.id}
                                    layout
                                    className="bg-white rounded-lg p-4 flex items-center gap-4"
                                  >
                                    <div className="relative w-20 h-20">
                                      <Image
                                        src={item.image}
                                        alt={item.name}
                                        fill
                                        className="object-contain"
                                        sizes="80px"
                                      />
                                    </div>
                                    <div className="flex-1">
                                      <h3 className="text-sm text-subtitle text-gray-900 mb-1">{item.name}</h3>
                                      <p className="text-[#E31837] text-subtitle">{item.price}</p>
                                      <div className="flex items-center gap-3 mt-2">
                                        <button
                                          onClick={() => updateQuantity(item.id, -1)}
                                          className="w-8 h-8 rounded-full border-2 border-[#E31837] flex items-center justify-center text-[#E31837] text-button"
                                        >
                                          -
                                        </button>
                                        <span className="text-subtitle">{item.quantity}</span>
                                        <button
                                          onClick={() => updateQuantity(item.id, 1)}
                                          className="w-8 h-8 rounded-full border-2 border-[#E31837] flex items-center justify-center text-[#E31837] text-button"
                                        >
                                          +
                                        </button>
                                      </div>
                                    </div>
                                  </motion.div>
                                ))}
                              </div>
                            )}
                          </div>

                          {/* Cart Footer */}
                          {cartItems.length > 0 && (
                            <div className="bg-white p-4 shadow-top">
                              <div className="flex items-center justify-between mb-4">
                                <span className="text-lg text-title">Total</span>
                                <span className="text-lg text-title">{totalAmount.toFixed(2)} MAD</span>
                              </div>
                              <button 
                                onClick={() => setCheckoutState('payment')}
                                className="w-full bg-[#E31837] text-white py-3 rounded-lg text-button"
                              >
                                Checkout
                              </button>
                            </div>
                          )}
                        </motion.div>
                      )}

                      {checkoutState === 'payment' && (
                        <motion.div
                          key="payment"
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          exit={{ opacity: 0 }}
                          className="h-full flex flex-col bg-white"
                        >
                          <div className="flex-1 flex flex-col items-center justify-center p-8">
                            <div className="w-12 h-12 border-4 border-t-[#4285F4] border-r-[#34A853] border-b-[#FBBC05] border-l-[#EA4335] rounded-full animate-spin mb-4" />
                            <p className="text-lg font-medium text-gray-800 text-center">
                              Processing your payment...
                            </p>
                          </div>
                        </motion.div>
                      )}

                      {checkoutState === 'success' && (
                        <motion.div
                          key="success"
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          exit={{ opacity: 0 }}
                          className="h-full flex flex-col bg-white"
                        >
                          <div className="flex-1 flex flex-col items-center justify-center p-8">
                            <motion.div
                              initial={{ scale: 0 }}
                              animate={{ scale: 1 }}
                              transition={{ type: "spring", stiffness: 200, damping: 20 }}
                              className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mb-6"
                            >
                              <svg className="w-12 h-12 text-green-500" viewBox="0 0 24 24">
                                <path fill="currentColor" d="M9,16.17L4.83,12l-1.42,1.41L9,19 21,7l-1.41-1.41L9,16.17z" />
                              </svg>
                            </motion.div>
                            <h2 className="text-2xl font-semibold text-gray-800 mb-2 text-center">
                              Payment Successful!
                            </h2>
                            <p className="text-gray-600 text-center mb-8">
                              Your order has been confirmed
                            </p>
                            <button
                              onClick={() => setCheckoutState('tracking')}
                              className="bg-[#E31837] text-white px-8 py-3 rounded-lg text-button"
                            >
                              Track Your Order
                            </button>
                          </div>
                        </motion.div>
                      )}

                      {checkoutState === 'tracking' && (
                        <motion.div
                          key="tracking"
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          exit={{ opacity: 0 }}
                          className="h-full flex flex-col bg-[#F5F3EE]"
                        >
                          {/* Tracking Header */}
                          <div className="bg-[#E31837] pt-7 pb-3 px-4">
                            <div className="flex items-center">
                              <button 
                                onClick={() => {
                                  setCheckoutState('cart');
                                  setCurrentView('supermarket');
                                  setCartItems([]);
                                }}
                                className="w-9 h-9 bg-white rounded-full flex items-center justify-center mr-4"
                              >
                                <svg className="w-5 h-5 text-[#E31837]" viewBox="0 0 24 24">
                                  <path fill="currentColor" d="M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z" />
                                </svg>
                              </button>
                              <h1 className="text-xl text-title text-white">Order Tracking</h1>
                            </div>
                          </div>

                          {/* Tracking Content */}
                          <div className="flex-1 p-4">
                            <div className="bg-white rounded-xl p-4 mb-4">
                              <h2 className="text-lg font-semibold mb-2">Order #{orderId}</h2>
                              <p className="text-sm text-gray-600 mb-4">Estimated delivery: 30-45 minutes</p>
                              
                              <div className="space-y-6">
                                <div className="flex items-center">
                                  <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                                    <svg className="w-5 h-5 text-white" viewBox="0 0 24 24">
                                      <path fill="currentColor" d="M9,16.17L4.83,12l-1.42,1.41L9,19 21,7l-1.41-1.41L9,16.17z" />
                                    </svg>
                                  </div>
                                  <div className="ml-4">
                                    <p className="font-medium">Order Confirmed</p>
                                    <p className="text-sm text-gray-500">Your order has been confirmed</p>
                                  </div>
                                </div>

                                <div className="flex items-center">
                                  <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                                    <svg className="w-5 h-5 text-white" viewBox="0 0 24 24">
                                      <path fill="currentColor" d="M9,16.17L4.83,12l-1.42,1.41L9,19 21,7l-1.41-1.41L9,16.17z" />
                                    </svg>
                                  </div>
                                  <div className="ml-4">
                                    <p className="font-medium">Preparing Order</p>
                                    <p className="text-sm text-gray-500">Your items are being prepared</p>
                                  </div>
                                </div>

                                <div className="flex items-center">
                                  <div className="w-8 h-8 bg-[#E31837] rounded-full flex items-center justify-center animate-pulse">
                                    <svg className="w-5 h-5 text-white" viewBox="0 0 24 24">
                                      <path fill="currentColor" d="M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4Z" />
                                    </svg>
                                  </div>
                                  <div className="ml-4">
                                    <p className="font-medium">On the Way</p>
                                    <p className="text-sm text-gray-500">Your order is on its way to you</p>
                                  </div>
                                </div>

                                <div className="flex items-center opacity-50">
                                  <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                                    <svg className="w-5 h-5 text-white" viewBox="0 0 24 24">
                                      <path fill="currentColor" d="M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4Z" />
                                    </svg>
                                  </div>
                                  <div className="ml-4">
                                    <p className="font-medium">Delivered</p>
                                    <p className="text-sm text-gray-500">Enjoy your order!</p>
                                  </div>
                                </div>
                              </div>
                            </div>

                            {/* Order Summary */}
                            <div className="bg-white rounded-xl p-4">
                              <h3 className="font-semibold mb-3">Order Summary</h3>
                              <div className="space-y-2">
                                {cartItems.map((item) => (
                                  <div key={item.id} className="flex justify-between text-sm">
                                    <span>{item.quantity}x {item.name}</span>
                                    <span className="text-gray-600">{(parseFloat(item.price) * item.quantity).toFixed(2)} MAD</span>
                                  </div>
                                ))}
                                <div className="border-t pt-2 mt-2">
                                  <div className="flex justify-between font-semibold">
                                    <span>Total</span>
                                    <span>{totalAmount.toFixed(2)} MAD</span>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          ) : (
            <div className="absolute inset-0 bg-white pt-7">
              {/* VPN App Content */}
              <AnimatePresence mode="wait">
                {vpnScreen === 'main' ? (
                  <motion.div
                    key="main"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="px-4"
                  >
                    <div className="flex items-center justify-between mb-8">
                      <h1 className="text-2xl font-bold text-gray-900">Tindy Vpn</h1>
                      <button className="w-8 h-8 flex items-center justify-center text-gray-400">
                        <svg className="w-6 h-6" viewBox="0 0 24 24">
                          <path fill="currentColor" d="M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z" />
                        </svg>
                      </button>
                    </div>

                    {/* Country Selector */}
                    <button 
                      onClick={() => setVpnScreen('servers')}
                      className="w-full bg-white rounded-xl shadow-sm border border-gray-100 p-4 mb-8"
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <div className="text-3xl">{vpnCountry.flag}</div>
                          <div>
                            <h3 className="text-lg font-semibold text-gray-900">{vpnCountry.name}</h3>
                            <p className="text-sm text-gray-500">{vpnCountry.ping}</p>
                          </div>
                        </div>
                        <svg className="w-6 h-6 text-gray-400" viewBox="0 0 24 24">
                          <path fill="currentColor" d="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z" />
                        </svg>
                      </div>
                    </button>

                    {/* Connection Toggle */}
                    <div className="flex flex-col items-center mb-8">
                      <div 
                        className="w-20 h-20 rounded-full flex items-center justify-center mb-4 cursor-pointer"
                        style={{
                          background: isVpnConnected ? 'rgba(34, 197, 94, 0.1)' : 'rgba(239, 68, 68, 0.1)',
                          color: isVpnConnected ? 'rgb(34, 197, 94)' : 'rgb(239, 68, 68)'
                        }}
                        onClick={() => setIsVpnConnected(!isVpnConnected)}
                      >
                        <svg className="w-10 h-10" viewBox="0 0 24 24">
                          <path fill="currentColor" d="M12,3A9,9 0 0,1 21,12A9,9 0 0,1 12,21A9,9 0 0,1 3,12A9,9 0 0,1 12,3M12,19A7,7 0 0,1 5,12A7,7 0 0,1 12,5A7,7 0 0,1 19,12A7,7 0 0,1 12,19M12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15Z" />
                        </svg>
                      </div>
                      <p className="text-lg font-medium text-gray-900">
                        {isVpnConnected ? "Connected" : "Not Connected"}
                      </p>
                    </div>

                    {/* Session Timer */}
                    <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="text-gray-600">Session Time</h3>
                        <button className="px-4 py-1 bg-[#FF6B6B] text-white text-sm font-medium rounded-full">
                          + ADD TIME
                        </button>
                      </div>
                      <div className="text-center">
                        <h2 className="text-4xl font-bold text-gray-900 mb-2">{sessionTime}</h2>
                        <p className="text-sm text-gray-500">
                          {isVpnConnected ? "Session in progress" : "Connect to start your session"}
                        </p>
                      </div>
                    </div>
                  </motion.div>
                ) : (
                  <motion.div
                    key="servers"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="h-full"
                  >
                    {/* Servers Header */}
                    <div className="px-4 mb-6">
                      <div className="flex items-center gap-3">
                        <button 
                          onClick={() => setVpnScreen('main')}
                          className="w-8 h-8 flex items-center justify-center text-gray-600"
                        >
                          <svg className="w-6 h-6" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z" />
                          </svg>
                        </button>
                        <h1 className="text-xl font-bold text-gray-900">Locations</h1>
                        <div className="ml-auto text-sm text-gray-500">(0)</div>
                      </div>
                    </div>

                    {/* Servers Grid */}
                    <div className="px-4 grid grid-cols-2 gap-4">
                      {vpnServers.map((server) => (
                        <button
                          key={server.id}
                          onClick={() => {
                            setVpnScreen('main');
                            // You can add logic here to update the selected server
                          }}
                          className="bg-white/60 backdrop-blur-sm rounded-xl p-4 text-left border border-gray-100"
                        >
                          <div className="text-2xl mb-2">{server.flag}</div>
                          <div className="font-medium text-gray-900">{server.name}</div>
                          <div className="text-sm text-gray-500">{server.ping}</div>
                        </button>
                      ))}
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
```

## File: src\components\Portfolio.tsx

```tsx
'use client';

import { motion } from 'framer-motion';
import Image from 'next/image';

const projects = [
  {
    title: "English Level Assessment App",
    description: "A desktop application built with Flutter and Firebase that helps students assess and track their English proficiency level. Features include assessment tests, progress tracking, and personalized learning paths.",
    image: "/images/desktop_app.png",
    tags: ["Flutter", "Firebase", "Desktop", "Education"]
  },
  {
    title: "Business Management Suite",
    description: "A comprehensive mobile application for business owners to manage their companies, projects, and CEOs. Essential tool for business operations with features for project tracking, team management, and performance analytics.",
    image: "/images/mobile_app.png",
    tags: ["Mobile", "Business", "Management", "Analytics"]
  },
  {
    title: "Morjib Delivery Platform",
    description: "An all-in-one ecommerce and delivery platform similar to Glovo. Connects customers with local businesses for food, groceries, and other deliveries with real-time tracking and seamless payment integration.",
    image: "/images/morjib.png",
    tags: ["E-commerce", "Delivery", "Mobile", "Real-time"]
  }
];

export default function Portfolio() {
  return (
    <section id="portfolio" className="py-20">
      <div className="container mx-auto px-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5 }}
          className="text-center mb-12"
        >
          <h2 className="text-4xl font-bold text-[#1a1a1a] mb-4">Our Portfolio</h2>
          <p className="text-gray-600 max-w-2xl mx-auto">
            Check out our featured projects showcasing our expertise in desktop, mobile, and web development.
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {projects.map((project, index) => (
            <motion.div
              key={project.title}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
              className="bg-[#faf5f0] border border-[#1a1a1a] rounded-xl overflow-hidden"
            >
              <div className="relative aspect-[16/9] w-full">
                <Image
                  src={project.image}
                  alt={project.title}
                  fill
                  className="object-cover"
                />
              </div>
              <div className="p-6">
                <h3 className="text-2xl font-bold text-[#1a1a1a] mb-2">{project.title}</h3>
                <p className="text-gray-600 mb-4">{project.description}</p>
                <div className="flex flex-wrap gap-2">
                  {project.tags.map((tag) => (
                    <span
                      key={tag}
                      className="bg-[#1a1a1a] text-[#faf5f0] px-3 py-1 rounded-full text-sm"
                    >
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
}
```

## File: src\components\QuestionOverlay.tsx

```tsx
'use client';

import { motion, AnimatePresence } from 'framer-motion';
import { useState } from 'react';
import { BiX } from 'react-icons/bi';
import { BiCalculator } from 'react-icons/bi';

const projectQuestions = [
  {
    id: 1,
    question: "What type of project are you looking to build?",
    options: [
      "Web Application",
      "Mobile App",
      "Desktop Software",
      "E-commerce Site",
      "Custom Solution"
    ]
  },
  {
    id: 2,
    question: "What is your estimated timeline?",
    options: [
      "1-2 months",
      "2-3 months",
      "3-4 months",
      "4-6 months",
      "6+ months"
    ]
  },
  {
    id: 3,
    question: "What is your budget range?",
    options: [
      "5,000 - 8,000 MAD",
      "8,000 - 12,000 MAD",
      "12,000 - 15,000 MAD",
      "15,000 - 20,000 MAD",
      "To be discussed"
    ]
  }
];

export default function QuestionOverlay({ isOpen, onClose }: { isOpen: boolean; onClose: () => void }) {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<string[]>([]);

  const handleAnswer = (answer: string) => {
    const newAnswers = [...answers, answer];
    setAnswers(newAnswers);

    if (currentQuestion < projectQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      // Format the message for WhatsApp
      const projectType = newAnswers[0];
      const timeline = newAnswers[1];
      const budget = newAnswers[2];

      const message = `Hi! I'm interested in building a project:
• Type: ${projectType}
• Timeline: ${timeline}
• Budget: ${budget}

I'd like to discuss the details.`;

      // Close the overlay
      onClose();
      setCurrentQuestion(0);
      setAnswers([]);

      // Open WhatsApp with the pre-filled message
      const encodedMessage = encodeURIComponent(message);
      window.open(`https://wa.me/212765755723?text=${encodedMessage}`, '_blank');
    }
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/20 backdrop-blur-sm z-50 flex items-center justify-center"
        >
          <motion.div
            initial={{ scale: 0.95, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.95, opacity: 0 }}
            className="bg-[#fcf5eb] p-8 rounded-3xl w-full max-w-2xl mx-4 relative"
          >
            <button
              onClick={onClose}
              className="absolute top-6 right-6 text-gray-400 hover:text-gray-600 transition-colors"
            >
              <BiX className="w-8 h-8" />
            </button>

            <div className="mb-10 flex items-center gap-4">
              <div className="bg-[#1a1a1a] p-3.5 rounded-2xl">
                <BiCalculator className="w-7 h-7 text-white" />
              </div>
              <div>
                <h2 className="text-2xl font-bold text-gray-900">Project Calculator</h2>
                <p className="text-gray-500 text-sm mt-1">Get an instant project estimate</p>
              </div>
            </div>

            <div className="space-y-8">
              <div className="flex justify-between items-center">
                <div className="space-y-1">
                  <h3 className="text-sm font-medium text-gray-900">Progress</h3>
                  <p className="text-2xl font-bold text-gray-900">
                    {Math.round(((currentQuestion + 1) / projectQuestions.length) * 100)}%
                  </p>
                </div>
                <span className="text-sm text-gray-500">
                  Question {currentQuestion + 1} of {projectQuestions.length}
                </span>
              </div>

              <div className="w-full bg-gray-100 h-1.5 rounded-full overflow-hidden">
                <motion.div
                  initial={{ width: 0 }}
                  animate={{ width: `${((currentQuestion + 1) / projectQuestions.length) * 100}%` }}
                  className="h-full bg-[#1a1a1a]"
                  transition={{ ease: "easeInOut", duration: 0.3 }}
                />
              </div>

              <div>
                <h3 className="text-2xl font-bold text-gray-900 mb-6">
                  {projectQuestions[currentQuestion].question}
                </h3>

                <div className="grid gap-3">
                  {projectQuestions[currentQuestion].options.map((option, index) => (
                    <motion.button
                      key={option}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.1 }}
                      onClick={() => handleAnswer(option)}
                      className="w-full p-4 text-left rounded-2xl bg-white text-gray-600 transition-all duration-200 border-2 border-transparent hover:border-[#1a1a1a] hover:text-gray-900 group relative overflow-hidden"
                      whileHover={{ scale: 1.01 }}
                      whileTap={{ scale: 0.99 }}
                    >
                      <div className="flex items-center justify-between">
                        <span className="text-lg">{option}</span>
                        <svg 
                          className="w-5 h-5 transform transition-transform duration-200 translate-x-2 opacity-0 group-hover:translate-x-0 group-hover:opacity-100" 
                          fill="none" 
                          viewBox="0 0 24 24" 
                          stroke="currentColor"
                        >
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
                        </svg>
                      </div>
                    </motion.button>
                  ))}
                </div>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}
```

## File: src\components\Services.tsx

```tsx
'use client';

import { motion } from 'framer-motion';
import { FaCode, FaMobile, FaShoppingCart, FaPaintBrush } from 'react-icons/fa';

const services = [
  {
    icon: <FaCode className="w-8 h-8" />,
    title: "Web Development",
    description: "Custom websites and web applications built with modern technologies like React, Next.js, and Node.js.",
    features: ["Responsive Design", "SEO Optimization", "Fast Performance", "Modern UI/UX"]
  },
  {
    icon: <FaMobile className="w-8 h-8" />,
    title: "Mobile Development",
    description: "Native and cross-platform mobile applications for iOS and Android using React Native.",
    features: ["Cross-platform", "Native Performance", "Offline Support", "Push Notifications"]
  },
  {
    icon: <FaShoppingCart className="w-8 h-8" />,
    title: "E-commerce Solutions",
    description: "Complete e-commerce solutions with payment integration, inventory management, and admin dashboard.",
    features: ["Secure Payments", "Inventory Management", "Order Tracking", "Analytics"]
  },
  {
    icon: <FaPaintBrush className="w-8 h-8" />,
    title: "UI/UX Design",
    description: "Beautiful and intuitive user interfaces with focus on user experience and conversion.",
    features: ["Custom Design", "User Research", "Prototyping", "Brand Identity"]
  }
];

export default function Services() {
  return (
    <section className="py-20 bg-[#faf5f0]">
      <div className="container mx-auto px-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5 }}
          className="text-center mb-12"
        >
          <h2 className="text-4xl font-bold text-[#1a1a1a] mb-4">Our Services</h2>
          <p className="text-gray-600 max-w-2xl mx-auto">
            We provide end-to-end solutions for your digital needs, from design to development and deployment.
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {services.map((service, index) => (
            <motion.div
              key={service.title}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
              className="bg-white p-8 rounded-xl border border-[#1a1a1a] hover:shadow-lg transition-shadow"
            >
              <div className="bg-[#1a1a1a] text-[#faf5f0] p-3 rounded-lg w-fit mb-6">
                {service.icon}
              </div>
              <h3 className="text-2xl font-bold text-[#1a1a1a] mb-4">{service.title}</h3>
              <p className="text-gray-600 mb-6">{service.description}</p>
              <ul className="space-y-2">
                {service.features.map((feature) => (
                  <li key={feature} className="flex items-center text-gray-600">
                    <svg className="w-5 h-5 text-[#1a1a1a] mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    {feature}
                  </li>
                ))}
              </ul>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
}
```

## File: src\components\shared\ProjectCard.tsx

```tsx
'use client';

import Image from 'next/image'
import { Project } from '@/types'
import { motion } from 'framer-motion';

export default function ProjectCard({ title, description, image, tags, link }: Project) {
  return (
    <motion.div
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
      className="card group relative overflow-hidden rounded-lg border border-gray-200 bg-white shadow-sm"
    >
      <div className="aspect-video relative">
        <Image
          src={image}
          alt={title}
          fill
          className="object-cover transition-transform duration-300 group-hover:scale-105"
        />
      </div>
      <div className="p-6">
        <h3 className="text-xl font-semibold">{title}</h3>
        <p className="mt-2 text-gray-600">{description}</p>
        <div className="mt-4 flex flex-wrap gap-2">
          {tags.map((tag) => (
            <span
              key={tag}
              className="inline-block rounded-full bg-gray-100 px-3 py-1 text-sm text-gray-700"
            >
              {tag}
            </span>
          ))}
        </div>
        <motion.a
          href={link}
          target="_blank"
          rel="noopener noreferrer"
          className="mt-4 inline-block text-blue-600 hover:text-blue-800"
          whileHover={{ x: 5 }}
        >
          View Project →
        </motion.a>
      </div>
    </motion.div>
  )
}
```

## File: src\components\shared\ServiceCard.tsx

```tsx
'use client';

import { Service } from '@/types'
import { motion } from 'framer-motion';

export default function ServiceCard({ title, description, icon }: Service) {
  return (
    <motion.div
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
      className="card p-6 rounded-lg bg-white shadow-sm"
    >
      <div className="text-4xl mb-4">{icon}</div>
      <h3 className="text-xl font-semibold mb-2">{title}</h3>
      <p className="text-gray-600">{description}</p>
    </motion.div>
  )
}
```

## File: src\components\ui\Button.tsx

```tsx
import { ButtonHTMLAttributes } from 'react'

interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary'
  size?: 'sm' | 'md' | 'lg'
}

export default function Button({
  children,
  variant = 'primary',
  size = 'md',
  className = '',
  ...props
}: ButtonProps) {
  const baseStyles = 'inline-flex items-center justify-center rounded-md font-medium transition-colors'
  const variants = {
    primary: 'bg-black text-white hover:bg-gray-800',
    secondary: 'bg-gray-100 text-gray-900 hover:bg-gray-200',
  }
  const sizes = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2 text-base',
    lg: 'px-6 py-3 text-lg',
  }

  return (
    <button
      className={`${baseStyles} ${variants[variant]} ${sizes[size]} ${className}`}
      {...props}
    >
      {children}
    </button>
  )
}
```

## File: src\components\ui\Container.tsx

```tsx
interface ContainerProps {
  children: React.ReactNode
  className?: string
}

export default function Container({ children, className = '' }: ContainerProps) {
  return (
    <div className={`max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 ${className}`}>
      {children}
    </div>
  )
}
```

## File: src\constants\navigation.ts

```ts
export const navigation = [
  {
    name: 'Home',
    path: '/',
  },
  {
    name: 'Services',
    path: '/#services',
  },
  {
    name: 'Portfolio',
    path: '/#portfolio',
  },
  {
    name: 'About',
    path: '/#about',
  },
]
```

## File: src\constants\projects.ts

```ts
export const projects = [
  {
    title: 'Project 1',
    description: 'Description of project 1',
    image: '/images/projects/project1.png',
    tags: ['Next.js', 'React', 'TypeScript'],
    link: 'https://project1.com',
  },
  {
    title: 'Project 2',
    description: 'Description of project 2',
    image: '/images/projects/project2.png',
    tags: ['React', 'Node.js', 'MongoDB'],
    link: 'https://project2.com',
  },
]
```

## File: src\styles\flags.css

```css
.flag-circle {
  border: none !important;
  padding: 0 !important;
  background: transparent !important;
}

.flag-circle button {
  border: none !important;
  padding: 0 !important;
  background: transparent !important;
  pointer-events: none !important;
}

.flag-circle .ReactFlagsSelect-module_selectBtn__19wW7 {
  border: none !important;
  padding: 0 !important;
}

.flag-circle .ReactFlagsSelect-module_selectValue__152eS {
  padding: 0 !important;
}

.flag-circle .ReactFlagsSelect-module_flagsSelect__2pfa2 {
  padding: 0 !important;
}

.flag-circle img.ReactFlagsSelect-module_selectFlag__2q5gC {
  width: 100% !important;
  height: 100% !important;
  object-fit: cover !important;
  border-radius: 50% !important;
}
```

## File: src\types\index.ts

```ts
export interface Project {
  title: string
  description: string
  image: string
  tags: string[]
  link: string
}

export interface Service {
  title: string
  description: string
  icon: React.ReactNode
}

export interface NavItem {
  name: string
  path: string
}
```

